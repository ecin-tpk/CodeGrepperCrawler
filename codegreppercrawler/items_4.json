[
{"title": "express ejs", "code": "let express = require('express');\nlet app = express();\n\napp.set('view engine', 'ejs');\n\napp.get('/', (req, res) => {\n  res.render('index', {foo: 'FOO'});\n});\n\napp.listen(4000, () => console.log('Example app listening on port 4000!'));", "date": "Mar 30 2020", "vote": 8, "tags": ["javascript", "express"], "posted_by": "Relieved Ratel", "source_name": "github.com", "source_url": "https://github.com/mde/ejs/wiki/Using-EJS-with-Express"},
{"title": "how to include in ejs", "code": " <%- include('./partials/nav.ejs') %>", "date": "May 27 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Beautiful Badger", "source_name": null, "source_url": null},
{"title": "add one file to another in ejs", "code": "<%- include('partials/messages'); %>", "date": "Oct 31 2020", "vote": 11, "tags": ["javascript", "express"], "posted_by": "Code_Breaker", "source_name": null, "source_url": null},
{"title": "ejs", "code": "npm install ejs\t//install ejs in cmd", "date": "Aug 12 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "KD", "source_name": null, "source_url": null},
{"title": "express error handling", "code": "app.use(function (err, req, res, next) {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\n", "date": "Nov 22 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Rich Rabbit", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/error-handling.html"},
{"title": "express example using puppeteer", "code": "require('dotenv/config')\nconst puppeteer = require('puppeteer')\n\n(async () => {\n\ttry {\n\t\tconst browser = await puppeteer.launch({\n\t\t\theadless: false,\n\t\t\targs: [\n\t\t\t\t'--allow-external-pages',\n\t\t\t\t'--allow-third-party-modules',\n\t\t\t\t'--data-reduction-proxy-http-proxies',\n\t\t\t\t'--no-sandbox'\n\t\t\t]\n\t\t})\n\t\tconst context = await browser.createIncognitoBrowserContext()\n\t\tconst page = await context.newPage()\n\t\tawait page.goto('https://medium.com', { waitUntil: 'networkidle2' })\n\t\tawait page.setUserAgent(process.env.USER_AGENT)\n\t\t// await page.setViewport({ width: 1920, height: 1080 })\n\t\tawait page.evaluate(() => window.scrollBy(0, 1000))\n\t\tawait page.waitForTimeout()\n\t\tawait page.click('.qw a')\n\t\tawait page.waitForNavigation({ waitUntil: 'networkidle2', delay: 1000 })\n\t\tawait page.click('a[aria-label=\"Search\"]')\n\t\tawait page.waitForNavigation({ waitUntil: 'networkidle2', delay: 1000 })\n\t\tawait page.focus('.js-searchInput')\n\t\tawait page.type('.js-searchInput', 'react', { delay: 100 })\n\t\tawait page.waitForSelector('.js-searchInput', { timeout: 1000 })\n\t\tawait page.keyboard.press(String.fromCharCode(13))\n\t\tawait page.waitForSelector('.js-postListHandle', { timeout: 1000 })\n\t\tawait page.screenshot({ path: 'screnshoot.jpg', quality: 80 })\n\n\t\tawait browser.close()\n\t} catch (err) {\n\t\tconsole.log(`'Puppeteer Error Detencted -> ${err}'`)\n\t}\n})()\n", "date": "Dec 28 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express download file", "code": "app.get((req, res, next) => {\n  res.download('/file/to/be/downloaded.ext');\n  res.status(200);\n});", "date": "Aug 13 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express error middleware", "code": "function errorHandler (err, req, res, next) {\n  if (res.headersSent) {\n    return next(err)\n  }\n  res.status(500)\n  res.render('error', { error: err })\n}\n", "date": "Jan 26 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "abhishekdipu", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/error-handling.html"},
{"title": "express generator error handling", "code": "app.get('/', function (req, res) {\n  throw new Error('BROKEN') // Express will catch this on its own.\n})\n", "date": "Nov 23 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Strange Shrew", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/error-handling.html"},
{"title": "express Error: Cannot find module '.database/connection'", "code": "Error: Cannot find module '.database/connection'", "date": "Oct 28 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Smoggy Squirrel", "source_name": null, "source_url": null},
{"title": "express error handling", "code": "app.use(function (err, req, res, next) {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\n", "date": "Nov 22 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Rich Rabbit", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/error-handling.html"},
{"title": "express generator error handling", "code": "app.get('/', function (req, res) {\n  throw new Error('BROKEN') // Express will catch this on its own.\n})\n", "date": "Nov 23 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Strange Shrew", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/error-handling.html"},
{"title": "express file upload mv", "code": "app.post('/upload-avatar', async (req, res) => {\n    try {\n        if(!req.files) {\n            res.send({\n                status: false,\n                message: 'No file uploaded'\n            });\n        } else {\n            //Use the name of the input field (i.e. \"avatar\") to retrieve the uploaded file\n            let avatar = req.files.avatar;\n            \n            //Use the mv() method to place the file in upload directory (i.e. \"uploads\")\n            avatar.mv('./uploads/' + avatar.name);\n\n            //send response\n            res.send({\n                status: true,\n                message: 'File is uploaded',\n                data: {\n                    name: avatar.name,\n                    mimetype: avatar.mimetype,\n                    size: avatar.size\n                }\n            });\n        }\n    } catch (err) {\n        res.status(500).send(err);\n    }\n});\n", "date": "Feb 10 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Curious Corncrake", "source_name": "attacomsian.com", "source_url": "https://attacomsian.com/blog/uploading-files-nodejs-express"},
{"title": "express fingerprint", "code": "var\u00a0Fingerprint\u00a0=\u00a0require('express-fingerprint')\u00a0app.use(Fingerprint({\u00a0\u00a0\u00a0\u00a0parameters:[\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Defaults\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Fingerprint.useragent,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Fingerprint.acceptHeaders,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Fingerprint.geoip,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Additional\u00a0parameters\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function(next)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0...do\u00a0something...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next(null,{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'param1':'value1'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function(next)\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0...do\u00a0something...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next(null,{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'param2':'value2'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\u00a0\u00a0\u00a0\u00a0]}))\u00a0app.get('*',function(req,res,next)\u00a0{\u00a0\u00a0\u00a0\u00a0//\u00a0Fingerprint\u00a0object\u00a0\u00a0\u00a0\u00a0console.log(req.fingerprint)})", "date": "May 28 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Yoyo Bu", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express-fingerprint"},
{"title": "express delete image", "code": "const router = express.Router();\nconst path = require(\"path\");\nconst fs = require('fs');\nvar multer = require('multer')\nvar upload = multer({ dest: 'uploads/' })\n\nrouter.get('/:folder/:id', async (req, res) => {\n    let filepath = path.join(__dirname + `/../images/${req.params.folder}/${req.params.id}.png`);\n    res.sendFile(filepath);\n});\n\nconst upload = async (image, folder, id) => {\n\n    let dir = `images`;\n\n    if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir);\n    }\n\n    dir = `images/${folder}`;\n\n    if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir);\n    }\n\n    await image.mv(`images/${folder}/${id}.png`);\n\n    return `${config.DOMAIN}/images/${folder}/${id}`;\n}\n\nrouter.post('/:folder/:id', upload.single('file'), async (req, res) => {\n    try {\n\n        let image = req.files.image;\n\n        if (!image)\n            return res.status(400).send({ message: 'Image not provided!' });\n\n        const imageUrl = await upload(image, req.params.folder, req.params.id);\n\n        if (imageUrl)\n            res.status(201).send({ message: \"Image uploaded\", url: imageUrl });\n\n    } catch (e) {\n        res.status(400).send({ message: \"Error uploading image!\", error: e.toString(), req: req.body });\n    }\n});\n\nrouter.delete('/:folder/:id', async (req, res) => {\n    try {\n        fs.unlinkSync(`images/${req.params.folder}/${req.params.id}.png`);\n\n        res.status(201).send({ message: \"Image deleted\" });\n\n    } catch (e) {\n        res.status(400).send({ message: \"Error deleting image!\", error: e.toString(), req: req.body });\n    }\n});\n\nmodule.exports = router;", "date": "Aug 09 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Graceful Goosander", "source_name": null, "source_url": null},
{"title": "node express cors headers", "code": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n", "date": "Mar 24 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Adventurous Aardvark", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "express js cors", "code": "var express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})", "date": "Nov 13 2020", "vote": 20, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express cors error", "code": "//install\nnpm install cors\n//use\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n", "date": "Sep 20 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "kepl3r", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "cors express", "code": "var allowedOrigins = ['http://localhost:3000',\n                      'http://yourapp.com'];\napp.use(cors({  \n  origin: function(origin, callback){\n    // allow requests with no origin     \n    // (like mobile apps or curl requests)    \n    if(!origin) \n      return callback(null, true);    \n    if(allowedOrigins.indexOf(origin) === -1){\n      var msg = 'The CORS policy for this site does not ' +                \n          'allow access from the specified Origin.';      \n      return callback(new Error(msg), false);    \n    }    \n    return callback(null, true);  \n  }\n}));", "date": "Aug 05 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Enthusiastic Elephant", "source_name": "medium.com", "source_url": "https://medium.com/zero-equals-false/using-cors-in-express-cac7e29b005b"},
{"title": "express cors policy", "code": "$ npm install cors\n", "date": "Mar 22 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Condemned Crane", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "what is template engine in express", "code": "A template engine enables you to use static template files in your application. \nAt runtime, the template engine replaces variables in a template file with actual values, and transforms the template into an HTML file sent to the client.", "date": "May 12 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Delightful Deer", "source_name": null, "source_url": null},
{"title": "express database", "code": "Some Databases : \n\n1.https://pouchdb.com/ - Light Weight - Alot of Functions\n2.https://dbdb.io/db/nedb - Light Weight - Easy To Use \n3.https://www.mongodb.com/ - Best DB - Complex To Use", "date": "Feb 06 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Undefined", "source_name": null, "source_url": null},
{"title": "how to access a database in express", "code": "var MongoClient = require('mongodb').MongoClient\n\nMongoClient.connect('mongodb://localhost:27017/animals', function (err, client) {\n  if (err) throw err\n\n  var db = client.db('animals')\n\n  db.collection('mammals').find().toArray(function (err, result) {\n    if (err) throw err\n\n    console.log(result)\n  })\n})\n", "date": "Nov 21 2019", "vote": 1, "tags": ["javascript", "express"], "posted_by": "European Red Squirrel", "source_name": null, "source_url": null},
{"title": "how to access a database in express", "code": "var mysql = require('mysql')\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'dbuser',\n  password: 's3kreee7',\n  database: 'my_db'\n})\n\nconnection.connect()\n\nconnection.query('SELECT 1 + 1 AS solution', function (err, rows, fields) {\n  if (err) throw err\n\n  console.log('The solution is: ', rows[0].solution)\n})\n\nconnection.end()\n", "date": "Nov 21 2019", "vote": 0, "tags": ["javascript", "express"], "posted_by": "European Red Squirrel", "source_name": null, "source_url": null},
{"title": "node express cors headers", "code": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n", "date": "Mar 24 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Adventurous Aardvark", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "using multiple http verbs on express path request", "code": "app.route('/book')\n  .get(function (req, res) {\n    res.send('Get a random book')\n  })\n  .post(function (req, res) {\n    res.send('Add a book')\n  })\n  .put(function (req, res) {\n    res.send('Update the book')\n  })\n", "date": "Nov 13 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Fantastic Fish", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "nodejs CORS policy", "code": "app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\n\napp.get('/', function(req, res, next) {\n  // Handle the get for this route\n});\n\napp.post('/', function(req, res, next) {\n // Handle the post for this route\n});", "date": "Apr 22 2021", "vote": 2, "tags": ["javascript", "express", "whatever"], "posted_by": "Annoying Anteater", "source_name": "enable-cors.org", "source_url": "https://enable-cors.org/server_expressjs.html"},
{"title": "express js cors", "code": "var express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})", "date": "Nov 13 2020", "vote": 20, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "allow cors express", "code": "app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});", "date": "Jun 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": null, "source_url": null},
{"title": "express cors error", "code": "//install\nnpm install cors\n//use\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n", "date": "Sep 20 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "kepl3r", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "express cors policy", "code": "$ npm install cors\n", "date": "Mar 22 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Condemned Crane", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "express cookies", "code": "const express = require('express');\nconst cookieParser = require('cookie-parser');\n\nconst app = express();\napp.use(cookieParser());\n\napp.get('/', (req, res) => {\n  res.send(req.cookies);\n});\n\napp.listen(3000);", "date": "Sep 19 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express case sensitive routing", "code": "// express case sensitive routing\napp.enable('case sensitive routing');", "date": "Jan 18 2021", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Mehedi Islam Ripon", "source_name": null, "source_url": null},
{"title": "express signed cookies", "code": "var express = require('express');\nvar cookieParser = require('cookie-parser');\n\nvar app = express();\napp.use(cookieParser('YOUR-SECRET-SALT'));\n\napp.get('/', (req, res, next) => {\n  res.cookie('name', 'value', { signed: true });\n  res.send('Success');\n});\n\napp.get('/test', (req, res, next) => {\n  req.signedCookies.name; // 'value'\n});", "date": "Oct 26 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express check if object is empty", "code": "if(Object.keys(obj).length === 0) {\n\n}", "date": "Sep 09 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Fusinato", "source_name": null, "source_url": null},
{"title": "widlicard in express router", "code": "//This route path will match acd and abcd.\napp.get('/ab?cd', function (req, res) {\n  res.send('ab?cd')\n})\n//This route path will match abcd, abbcd, abbbcd, and so on.\napp.get('/ab+cd', function (req, res) {\n  res.send('ab+cd')\n})\n//This route path will match abcd, abxcd, abRANDOMcd, ab123cd, and so on.\napp.get('/ab*cd', function (req, res) {\n  res.send('ab*cd')\n})\n//This route path will match /abe and /abcde.\napp.get('/ab(cd)?e', function (req, res) {\n  res.send('ab(cd)?e')\n})\n//This route path will match anything with an \u201ca\u201d in it.\napp.get(/a/, function (req, res) {\n  res.send('/a/')\n})\n//This route path will match butterfly and dragonfly, \n//but not butterflyman, dragonflyman, and so on.\napp.get(/.*fly$/, function (req, res) {\n  res.send('/.*fly$/')\n})", "date": "May 20 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Live to Code", "source_name": null, "source_url": null},
{"title": "react native object is empty", "code": "//when this.state.errors object is empty \nif (Object.keys(this.state.errors).length == 0) {\n  this.props.updateUser(user);\n  this.props.navigation.goBack();\n}", "date": "May 29 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Lonely Lark", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/48353471/checking-if-a-state-object-is-empty"},
{"title": "using multiparty with node js express", "code": "var express = require('express');\nvar multiparty = require('connect-multiparty'),\n    multipartyMiddleware = multiparty({ uploadDir: './imagesPath' });\n\nvar router = express.Router();\n\nrouter.post('/', multipartyMiddleware, function(req, res) {\n  console.log(req.body, req.files);\n  var file = req.files.file;\n  console.log(file.name);\n  console.log(file.type);\n  res.status(200).send('OK');\n});\n\nmodule.exports = router;", "date": "May 05 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "ZAC87", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/32914272/proper-way-to-use-connect-multiparty-with-express-js"},
{"title": "user property in express jwt", "code": "jwt({\u00a0secret:\u00a0publicKey,\u00a0requestProperty:\u00a0'auth'\u00a0});", "date": "Jan 22 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Nice Narwhal", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express-jwt"},
{"title": "express jwt", "code": "// JWT MIDDLEWARE\nconst jwt = require('jsonwebtoken')\nconst httpError = require('http-errors')\n\nmodule.exports = (req, res, next) => {\n  try {\n    const tokenHeader = req.headers.authorization.split('Bearer ')[1]\n    const decoded = jwt.verify(tokenHeader, process.env.ACCESS_TOKEN_SECRET)\n    req.user = decoded\n    next()\n  } catch (err) {\n    next(httpError(401))\n  }\n}\n\n// ROUTE LOGIN\napp.get('/protect', authJwt, (req, res) => {\n  console.log(req.user)\n  res.send('aim in proteced route')\n})\n\napp.post('/login', (req, res) => {\n  const bodyPayload = {\n    id: Date.now(),\n    username: req.body.username\n  }\n  const token = signAccessToken(res, bodyPayload)\n  return res.status(200).json(token)\n})\n\napp.post('/refresh-token', (req, res) => {\n  const refreshToken = signRefreshToken(req)\n  res.status(200).json(refreshToken)\n  res.end()\n})\n\n// JWT HELPER\nconst jwt = require('jsonwebtoken')\nconst httpError = require('http-errors')\n\nexports.signAccessToken = (res, payload) => {\n  try {\n    if (payload) {\n      const accessToken = jwt.sign({ ...payload }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1m' })\n      const refreshToken = jwt.sign({ ...payload }, process.env.REFRESH_TOKEN_SECRET, { expiresIn: '90d' })\n      res.cookie('refreshToken', `${refreshToken}`, { expired: 86400 * 90 })\n      return { accessToken, refreshToken }\n    }\n  } catch (err) {\n    return httpError(500, err)\n  }\n}\n\nexports.signRefreshToken = (req) => {\n  try {\n    const getToken = req.cookies.refreshToken\n    if (getToken) {\n      const { id, username } = jwt.verify(getToken, process.env.REFRESH_TOKEN_SECRET)\n      const accesssToken = jwt.sign({ id, username }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1m' })\n      return { accesssToken }\n    }\n  } catch (err) {\n    return httpError(401, err)\n  }\n}\n", "date": "Nov 05 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "upload image and video cloudinary expressjs", "code": "cloudinary.config({\ncloud_name: process.env.CLOUD_NAME,\napi_key: process.env.API_KEY,\napi_secret: process.env.API_SECRET\n});\nconst storage = cloudinaryStorage({\ncloudinary: cloudinary,\nfolder: \"demo\",\nallowedFormats: [\"jpg\", \"png\"],\ntransformation: [{ width: 500, height: 500, crop: \"limit\" }]\n});\nconst parser = multer({ storage: storage });", "date": "Jan 20 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Confused Cockroach", "source_name": "www.freecodecamp.org", "source_url": "https://www.freecodecamp.org/news/how-to-allow-users-to-upload-images-with-node-express-mongoose-and-cloudinary-84cefbdff1d9/"},
{"title": "typescript express next middleware type", "code": "import * as express from 'express'\nnext: express.NextFunction", "date": "Dec 14 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "florinrelea", "source_name": null, "source_url": null},
{"title": "TypeError:Cannot read property 'reviews' of null express", "code": "const router = express.Router({ mergeParams: true });", "date": "Jan 16 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "greenHermes", "source_name": null, "source_url": null},
{"title": "sql expressjs  update query", "code": "var mysql = require('mysql');\n\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\"\n});\n\ncon.connect(function(err) {\n  if (err) throw err;\n  var sql = \"UPDATE customers SET address = 'Canyon 123' WHERE address = 'Valley 345'\";\n  con.query(sql, function (err, result) {\n    if (err) throw err;\n    console.log(result.affectedRows + \" record(s) updated\");\n  });\n});", "date": "Dec 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Clean Cat", "source_name": null, "source_url": null},
{"title": "body parser express", "code": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n", "date": "Jul 21 2020", "vote": 10, "tags": ["javascript", "express"], "posted_by": "Philan ISithembiso", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/body-parser.html"},
{"title": "urlencoded json express", "code": "var express = require('express')\n\nvar app = express()\n\napp.use(express.json()) // for parsing application/json\napp.use(express.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded\n\napp.post('/profile', function (req, res, next) {\n  console.log(req.body)\n  res.json(req.body)\n})\n", "date": "Sep 30 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Healthy Hare", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/api.html"},
{"title": "app use body parser", "code": "\n// parse application/json\napp.use(bodyParser.json())\n", "date": "Jul 26 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Silly Shrike", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/body-parser.html"},
{"title": "share link in express js", "code": "app.get('/download', function(req, res, next) {\n  // Get the download sid\n  var downloadSid = req.query.sid;\n\n  // Get the download file path\n  getDownloadFilePath(downloadSid, function(err, path) {\n    if (err) return res.end('Error');\n\n    // Read and send the file here...\n\n    // Finally, delete the download session to invalidate the link\n    deleteDownload(downloadSid, function(err) {\n      // ...\n    });\n  });\n});", "date": "Jun 14 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Wrong Wildebeest", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/21999877/node-express-generate-a-one-time-route-link-download"},
{"title": "setup node js express basic setup", "code": "npm init -y\nnpm i express\n", "date": "Jul 03 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express and node", "code": "// Load HTTP module\nconst http = require(\"http\");\n\nconst hostname = \"127.0.0.1\";\nconst port = 8000;\n\n// Create HTTP server \nconst server = http.createServer((req, res) => {\n\n   // Set the response HTTP header with HTTP status and Content type\n   res.writeHead(200, {'Content-Type': 'text/plain'});\n   \n   // Send the response body \"Hello World\"\n   res.end('Hello World\\n');\n});\n\n// Prints a log once the server starts listening\nserver.listen(port, hostname, () => {\n   console.log(`Server running at http://${hostname}:${port}/`);\n})\n", "date": "Nov 23 2019", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Swallow Tail Gull", "source_name": null, "source_url": null},
{"title": "social login in node js and express js", "code": "passport.use('twitter', new TwitterStrategy({\n\u00a0\u00a0\u00a0\u00a0consumerKey\u00a0\u00a0\u00a0\u00a0 : twitterConfig.apikey,\n\u00a0\u00a0\u00a0\u00a0consumerSecret\u00a0 : twitterConfig.apisecret,\n\u00a0\u00a0\u00a0\u00a0callbackURL\u00a0\u00a0\u00a0\u00a0 : twitterConfig.callbackURL\n\u00a0\u00a0},\n\u00a0\u00a0function(token, tokenSecret, profile, done) {\n\u00a0\u00a0\u00a0\u00a0// make the code asynchronous\n\u00a0\u00a0\u00a0\u00a0// User.findOne won't fire until we have all our data back from Twitter\n\u00a0\u00a0\u00a0\u00a0process.nextTick(function() { \n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0User.findOne({ 'twitter.id' : profile.id }, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function(err, user) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// if there is an error, stop everything and return that\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ie an error connecting to the database\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (err)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return done(err);\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// if the user is found then log them in\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (user) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return done(null, user); // user found, return that user\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// if there is no user, create them\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var newUser\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 = new User();\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// set all of the user data that we need\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newUser.twitter.id\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 = profile.id;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newUser.twitter.token\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 = token;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newUser.twitter.username = profile.username;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newUser.twitter.displayName = profile.displayName;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newUser.twitter.lastStatus = profile._json.status.text;\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// save our user into the database\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newUser.save(function(err) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (err)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw err;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return done(null, newUser);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0})\n);\n", "date": "May 30 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Faithful Fish", "source_name": "code.tutsplus.com", "source_url": "https://code.tutsplus.com/articles/social-authentication-for-nodejs-apps-with-passport--cms-21618"},
{"title": "set up background process in express app", "code": "function populateDatabase() {\n  //connect to streaming API\n  //populate database\n}\n\nmodule.exports = populateDatabase;", "date": "Jul 22 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Courageous Cormorant", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/29111949/how-do-i-setup-a-background-process-on-a-express-js-app-hosting-on-azure-website"},
{"title": "set up background process in express app", "code": "//app.js\nvar populateDatabase = require(\"./listen\");\nsetInterval(60 * 1000, populateDatabase);\n// rest of app setup/start code", "date": "Jul 22 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Courageous Cormorant", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/29111949/how-do-i-setup-a-background-process-on-a-express-js-app-hosting-on-azure-website"},
{"title": "set headers in express", "code": " \tresponse.header(\"Access-Control-Allow-Origin\", \"*\");\n    response.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With,Content-Type, Accept\");\n    response.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE')", "date": "Aug 27 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Mk", "source_name": null, "source_url": null},
{"title": "hwo to cehck req header in js", "code": "var host = req.headers['host']; ", "date": "Jun 12 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Poised Parrot", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/13147693/how-to-extract-request-http-headers-from-a-request-using-nodejs-connect"},
{"title": "http header express", "code": "app.get('/', (req, res) => {\n  req.header('User-Agent')\n})\n// Use the Request.header() method to access\n//one individual request header\u2019s value", "date": "Apr 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Creepy Copperhead", "source_name": "flaviocopes.com", "source_url": "https://flaviocopes.com/express-headers/"},
{"title": "in express how do you set the location header", "code": "res.location('/customers/' + inst._id)1", "date": "Mar 13 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/14943607/how-to-set-the-location-response-http-header-in-express-framework"},
{"title": "express hello world", "code": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express", "date": "Jul 17 2020", "vote": 35, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "how to make an express server", "code": "// this is your code\n// ZDev1#4511 on discord if you want more help!\n// first you should install express in the terminal\n// `npm i express`.\nconst express = require('express');\nconst app = express();\n\n// route\napp.get('/', (req,res)=>{\n  // Sending This is the home page! in the page\n  res.send('This is the home page!');\n});\n\n// Listening to the port\nlet PORT = 3000;\napp.listen(PORT)\n\n// FINISH!", "date": "Jul 03 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "ZDev1", "source_name": null, "source_url": null},
{"title": "simple express server", "code": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));", "date": "Dec 17 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Busy Butterfly", "source_name": null, "source_url": null},
{"title": "sample express app", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n", "date": "May 12 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "setup node js express basic setup", "code": "npm init -y\nnpm i express\n", "date": "Jul 03 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "simple express server", "code": "const express = require('express');\nconst app = express();\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\nconst PORT = process.env.PORT || 3000;\n\napp.use(bodyParser.json());\n\n//connecting to db\ntry {\n    mongoose.connect('mongodb://localhost/YOUR_DB_NAME', {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      \tuseCreateIndex: true,\n      }, () =>\n      console.log(\"connected\"));\n  } catch (error) {\n    console.log(\"could not connect\");\n  }\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\n\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));", "date": "Dec 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Busy Butterfly", "source_name": null, "source_url": null},
{"title": "set 404 handling via express in node", "code": "app.use(function(req, res, next){\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.render('404', { url: req.url });\n    return;\n  }\n\n  // respond with json\n  if (req.accepts('json')) {\n    res.send({ error: 'Not found' });\n    return;\n  }\n\n  // default to plain-text. send()\n  res.type('txt').send('Not found');\n});", "date": "May 25 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Pleasant Pelican", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/a/9802006"},
{"title": "node express server static files", "code": "var express = require('express');\nvar app = express();\nvar path = require('path');\n\n//app.use(express.static(__dirname)); // Current directory is root\napp.use(express.static(path.join(__dirname, 'public'))); //  \"public\" off of current is root\n\napp.listen(80);\nconsole.log('Listening on port 80');", "date": "May 11 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "JDog", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/10434001/static-files-with-express-js"},
{"title": "serving static files with express", "code": "\napp.use(express.static('public'));\n\n", "date": "Mar 04 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Terrible Tuatara", "source_name": "expressjs.com", "source_url": "https://expressjs.com/de/starter/static-files.html"},
{"title": "node js express static folder", "code": "// node js -> express -> basic example: static folder, 404 page\n\nconst express = require('express');\nconst path = require('path');\nconst PORT = process.env.PORT || 5000;\n\nconst app = express();\n\nfunction error404(req, res) {\n  res.status(404);\n\n  if (req.accepts('html')) {\n    res.sendFile(path.join(__dirname, 'public/errors/404.html'));\n    return;\n  }\n\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  \n  res.type('txt').send('404 - Not found');\n}\n\napp\n  .use(express.static(path.join(__dirname, 'public')))\n  .use(error404)\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`));\n", "date": "Jul 06 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "sendfile express syntax", "code": "app.get('/', function(req, res){\n  res.sendFile('index.html');\n}); \n", "date": "Mar 20 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "www.techiediaries.com", "source_url": "https://www.techiediaries.com/express-sendfile-serve-static-files/"},
{"title": "express hello world", "code": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express", "date": "Jul 17 2020", "vote": 35, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "sample express app", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n", "date": "May 12 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "express js sample project", "code": "var express=require('express');\nvar app=express();\n\napp.get('/',function(req,res){\n\tres.send(\"Hello World!\");\n});\n\nvar server=app.listen(3000,function() {});\n", "date": "May 11 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "JDog", "source_name": "www.guru99.com", "source_url": "https://www.guru99.com/node-js-express.html"},
{"title": "generate express app", "code": "$ npx express-generator\n", "date": "Sep 03 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Anxious Addax", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/generator.html"},
{"title": "require express server.js", "code": "const\u00a0express\u00a0=\u00a0require('express')const\u00a0app\u00a0=\u00a0express()\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World')})\u00a0app.listen(3000)", "date": "Mar 19 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "reverse proxy using expressjs", "code": "var express  = require('express');\nvar app      = express();\nvar httpProxy = require('http-proxy');\nvar apiProxy = httpProxy.createProxyServer();\nvar serverOne = 'http://localhost:3001',\n    ServerTwo = 'http://localhost:3002',\n    ServerThree = 'http://localhost:3002';\n \napp.all(\"/app1/*\", function(req, res) {\n    console.log('redirecting to Server1');\n    apiProxy.web(req, res, {target: serverOne});\n});\n\napp.all(\"/app2/*\", function(req, res) {\n    console.log('redirecting to Server2');\n    apiProxy.web(req, res, {target: ServerTwo});\n});\n\napp.all(\"/app2/*\", function(req, res) {\n    console.log('redirecting to Server3');\n    apiProxy.web(req, res, {target: ServerThree});\n});\n\napp.listen(3000);", "date": "Aug 04 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "require express server.js", "code": "const\u00a0express\u00a0=\u00a0require('express')const\u00a0app\u00a0=\u00a0express()\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World')})\u00a0app.listen(3000)", "date": "Mar 19 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "PayloadTooLargeError: request entity too large", "code": "app.use(bodyParser.json({\n  limit: '50mb'\n}));\n\napp.use(bodyParser.urlencoded({\n  limit: '50mb',\n  parameterLimit: 100000,\n  extended: true \n}));\n", "date": "Jul 04 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Wide-eyed Walrus", "source_name": "github.com", "source_url": "https://github.com/apostrophecms/apostrophe/issues/1291"},
{"title": "request entity too large express", "code": "app.use(express.json({limit: '50mb'}));\napp.use(express.urlencoded({limit: '50mb'}));", "date": "Sep 15 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Outrageous Opossum", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/19917401/error-request-entity-too-large"},
{"title": "remove etag express", "code": "app.set('etag', false); // turn off", "date": "Oct 07 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "PentaPhil", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/15191511/disable-etag-header-in-express-node-js"},
{"title": "Run project in visual studio with iis express", "code": "In the solution folder view:\n\n- Right click on your website/ web app\n- Click on \"Set as Startup Project\"\n- Configure as needed (IIS Local as default)", "date": "Jul 14 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Powerful Penguin", "source_name": null, "source_url": null},
{"title": "relaod the page in express", "code": "  // Reloading the page\n    location.reload();", "date": "Jan 20 2021", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Repulsive Ray", "source_name": null, "source_url": null},
{"title": "react paypal express checkout", "code": "import\u00a0React\u00a0from\u00a0'react';import\u00a0PaypalExpressBtn\u00a0from\u00a0'react-paypal-express-checkout';\u00a0export\u00a0default\u00a0class\u00a0MyApp\u00a0extends\u00a0React.Component\u00a0{\u00a0\u00a0\u00a0\u00a0render()\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0onSuccess\u00a0=\u00a0(payment)\u00a0=>\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Congratulation,\u00a0it\u00a0came\u00a0here\u00a0means\u00a0everything's\u00a0fine!\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\t\tconsole.log(\"The\u00a0payment\u00a0was\u00a0succeeded!\",\u00a0payment);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\t\t//\u00a0You\u00a0can\u00a0bind\u00a0the\u00a0\"payment\"\u00a0object's\u00a0value\u00a0to\u00a0your\u00a0state\u00a0or\u00a0props\u00a0or\u00a0whatever\u00a0here,\u00a0please\u00a0see\u00a0below\u00a0for\u00a0sample\u00a0returned\u00a0data\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0onCancel\u00a0=\u00a0(data)\u00a0=>\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0User\u00a0pressed\u00a0\"cancel\"\u00a0or\u00a0close\u00a0Paypal's\u00a0popup!\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('The\u00a0payment\u00a0was\u00a0cancelled!',\u00a0data);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0You\u00a0can\u00a0bind\u00a0the\u00a0\"data\"\u00a0object's\u00a0value\u00a0to\u00a0your\u00a0state\u00a0or\u00a0props\u00a0or\u00a0whatever\u00a0here,\u00a0please\u00a0see\u00a0below\u00a0for\u00a0sample\u00a0returned\u00a0data\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0onError\u00a0=\u00a0(err)\u00a0=>\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0The\u00a0main\u00a0Paypal's\u00a0script\u00a0cannot\u00a0be\u00a0loaded\u00a0or\u00a0somethings\u00a0block\u00a0the\u00a0loading\u00a0of\u00a0that\u00a0script!\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"Error!\",\u00a0err);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Because\u00a0the\u00a0Paypal's\u00a0main\u00a0script\u00a0is\u00a0loaded\u00a0asynchronously\u00a0from\u00a0\"https://www.paypalobjects.com/api/checkout.js\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0=>\u00a0sometimes\u00a0it\u00a0may\u00a0take\u00a0about\u00a00.5\u00a0second\u00a0for\u00a0everything\u00a0to\u00a0get\u00a0set,\u00a0or\u00a0for\u00a0the\u00a0button\u00a0to\u00a0appear\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0env\u00a0=\u00a0'sandbox';\u00a0//\u00a0you\u00a0can\u00a0set\u00a0here\u00a0to\u00a0'production'\u00a0for\u00a0production\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0currency\u00a0=\u00a0'USD';\u00a0//\u00a0or\u00a0you\u00a0can\u00a0set\u00a0this\u00a0value\u00a0from\u00a0your\u00a0props\u00a0or\u00a0state\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0total\u00a0=\u00a01;\u00a0//\u00a0same\u00a0as\u00a0above,\u00a0this\u00a0is\u00a0the\u00a0total\u00a0amount\u00a0(based\u00a0on\u00a0currency)\u00a0to\u00a0be\u00a0paid\u00a0by\u00a0using\u00a0Paypal\u00a0express\u00a0checkout\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Document\u00a0on\u00a0Paypal's\u00a0currency\u00a0code:\u00a0https://developer.paypal.com/docs/classic/api/currency_codes/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0client\u00a0=\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sandbox:\u00a0\u00a0\u00a0\u00a0'YOUR-SANDBOX-APP-ID',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0production:\u00a0'YOUR-PRODUCTION-APP-ID',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0In\u00a0order\u00a0to\u00a0get\u00a0production's\u00a0app-ID,\u00a0you\u00a0will\u00a0have\u00a0to\u00a0send\u00a0your\u00a0app\u00a0to\u00a0Paypal\u00a0for\u00a0approval\u00a0first\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0For\u00a0sandbox\u00a0app-ID\u00a0(after\u00a0logging\u00a0into\u00a0your\u00a0developer\u00a0account,\u00a0please\u00a0locate\u00a0the\u00a0\"REST\u00a0API\u00a0apps\"\u00a0section,\u00a0click\u00a0\"Create\u00a0App\"):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0\u00a0\u00a0=>\u00a0https://developer.paypal.com/docs/classic/lifecycle/sb_credentials/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0For\u00a0production\u00a0app-ID:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0\u00a0\u00a0=>\u00a0https://developer.paypal.com/docs/classic/lifecycle/goingLive/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0NB.\u00a0You\u00a0can\u00a0also\u00a0have\u00a0many\u00a0Paypal\u00a0express\u00a0checkout\u00a0buttons\u00a0on\u00a0page,\u00a0just\u00a0pass\u00a0in\u00a0the\u00a0correct\u00a0amount\u00a0and\u00a0they\u00a0will\u00a0work!\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<PaypalExpressBtn\u00a0env={env}\u00a0client={client}\u00a0currency={currency}\u00a0total={total}\u00a0onError={onError}\u00a0onSuccess={onSuccess}\u00a0onCancel={onCancel}\u00a0/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\u00a0\u00a0\u00a0\u00a0}}", "date": "Oct 23 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Big Jojo", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/react-paypal-express-checkout"},
{"title": "pug node js express", "code": "app.set('view engine', 'pug')", "date": "May 01 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Alive Aardvark", "source_name": null, "source_url": null},
{"title": "pug node js express", "code": "npm install pug\n\n", "date": "May 01 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Alive Aardvark", "source_name": null, "source_url": null},
{"title": "express view engine', 'ejs", "code": "app.set(\"view engine\", \"ejs\");\napp.set(\"views\", path.join(__dirname, \"views\"));", "date": "Jan 22 2021", "vote": 15, "tags": ["javascript", "express"], "posted_by": "Mehedi Islam Ripon", "source_name": null, "source_url": null},
{"title": "Programa\u00e7\u00e3o web com Node e Express Beneficiando-se da stack JavaScript", "code": "const fs = require('fs');\nconst path = require('path');\nconst Sequelize = require('sequelize');\nconst config = require('../../config/database.js');\n\nconst db = {};\nconst sequelize = new Sequelize(config);\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => (file.indexOf('.') !== 0) && (file !== path.basename(__filename)) && (file.slice(-3) === '.js'))\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nmodule.exports = db;\n", "date": "May 07 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Clear Cheetah", "source_name": "blog.rocketseat.com.br", "source_url": "https://blog.rocketseat.com.br/nodejs-express-sequelize/"},
{"title": "put route error express", "code": "//don't forget the \"/\" in the route targeted URL : \napp.put(\"/collection/:id\", (req, res)=>{\n\t//route content\n})", "date": "Apr 28 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Careful Camel", "source_name": null, "source_url": null},
{"title": "processing an express form with node-postgres", "code": "const pg = require('pg');\nconst connectionString = process.env.DATABASE_URL || 'postgres://localhost:5432/todo';\n\nconst client = new pg.Client(connectionString);\nclient.connect();\nconst query = client.query(\n  'CREATE TABLE items(id SERIAL PRIMARY KEY, text VARCHAR(40) not null, complete BOOLEAN)');\nquery.on('end', () => { client.end(); });1\n", "date": "Apr 23 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": "mherman.org", "source_url": "https://mherman.org/blog/postgresql-and-nodejs/"},
{"title": "refresh after delete in express", "code": "  // Reloading the page\n    location.reload();", "date": "Jan 20 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Repulsive Ray", "source_name": null, "source_url": null},
{"title": "passing variable in table row delete button node js express", "code": "<button class=\"delete-button\" onclick=\"deleting(<%= item._id %>)\">X</button>\nfunction deleting(value){\nfetch('/delete', { method: 'POST', data: {buttonId: value} })\n  .then(function (response) {\n    if (response.ok) {\n      console.log('Delete was recorded')\n      return\n    }\n    throw new Error('Request failed.')\n  })\n  .catch(function (error) {\n    console.log(error)\n  })\n", "date": "Dec 30 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Tender Thrush", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/58401828/how-to-pass-name-or-id-of-a-button-to-node-using-fetch"},
{"title": "parse json express", "code": "// Update for Express 4.16+\n// Starting with release 4.16.0, a new express.json() middleware is available.\nvar express = require('express');\nvar app = express();\n\napp.use(express.json());\n\napp.post('/', function(request, response){\n  console.log(request.body);      // your JSON\n   response.send(request.body);    // echo the result back\n});\n\napp.listen(3000);", "date": "May 09 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Mushy Magpie", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/10005939/how-do-i-consume-the-json-post-data-in-an-express-application"},
{"title": "express json body", "code": "$ npm install body-parser\n", "date": "Mar 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/body-parser.html"},
{"title": "app use body parser", "code": "\n// parse application/json\napp.use(bodyParser.json())\n", "date": "Jul 26 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Silly Shrike", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/body-parser.html"},
{"title": "nuxt looks for npm_modules on express", "code": "I found Nuxt build will not bundle files in node_modules,\nso if you want to bundle all dependencies into .nuxt, you should use:\n________________________\nnuxt build --standalone |\n________________________|\nsee here: https://github.com/nuxt/nuxt.js/issues/4292", "date": "Sep 30 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "florinrelea", "source_name": null, "source_url": null},
{"title": "post express node js input", "code": "<form method=\"POST\" action=\"/submit-form\">\n  <input type=\"text\" name=\"username\" />\n  <input type=\"submit\" />\n</form>", "date": "Dec 16 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Poor Porcupine", "source_name": "flaviocopes.com", "source_url": "https://flaviocopes.com/express-forms/"},
{"title": "post express node js input", "code": "const express = require('express')\nconst app = express()\n\napp.use(express.urlencoded({\n  extended: true\n}))\n", "date": "Dec 16 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Poor Porcupine", "source_name": "flaviocopes.com", "source_url": "https://flaviocopes.com/express-forms/"},
{"title": "post express node js input", "code": "app.post('/submit-form', (req, res) => {\n  const username = req.body.username\n  //...\n  res.end()\n})\n", "date": "Dec 16 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Poor Porcupine", "source_name": "flaviocopes.com", "source_url": "https://flaviocopes.com/express-forms/"},
{"title": "npm paypal express checkout", "code": "$\u00a0npm\u00a0install\u00a0paypal-express-checkout", "date": "Oct 30 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Frail Flamingo", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/paypal-express-checkout"},
{"title": "npm express async handler", "code": "npm install --save express-async-handler", "date": "Apr 09 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "And Then There Was Zach", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express-async-handler"},
{"title": "PayloadTooLargeError: request entity too large", "code": "app.use(bodyParser.json({\n  limit: '50mb'\n}));\n\napp.use(bodyParser.urlencoded({\n  limit: '50mb',\n  parameterLimit: 100000,\n  extended: true \n}));\n", "date": "Jul 04 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Wide-eyed Walrus", "source_name": "github.com", "source_url": "https://github.com/apostrophecms/apostrophe/issues/1291"},
{"title": "PayloadTooLargeError: request entity too large using express json middleware", "code": "app.use(express.json({limit: '50mb'}));\napp.use(express.urlencoded({limit: '50mb'}));", "date": "Jul 28 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Outstanding Oystercatcher", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/19917401/error-request-entity-too-large"},
{"title": "nodejs express server img src", "code": "<img src=\"/logo.jpg\" />", "date": "Jun 03 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Australian Spiny Anteater", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/26013675/serving-a-static-html-page-containing-an-image-using-node-js-express"},
{"title": "nodejs express server img src", "code": "app.use(express.static(__dirname + '/images'));", "date": "Jun 03 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Australian Spiny Anteater", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/26013675/serving-a-static-html-page-containing-an-image-using-node-js-express"},
{"title": "express redirect", "code": "app.get('/', (req, res) => {\n  res.redirect('/foo/bar');\n});", "date": "Jul 18 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "nodejs express routing get", "code": "const express = require('express');\nconst mysql = require('mysql');\n\n// Connecting with database\nconst db = mysql.createConnection({\n  host: 'localhost',\t\t\t\t\t// The host you're using\n  user: 'yourusername',\t\t\t\t\t// The username you use to enter database\n  password: 'yourpassword'\t\t\t\t// Your password to your username\n});\n\ndb.connect((error) => {\n  if(error) {\n    throw error;\n  }\n  console.log('MySQL Connected');\n});\n\nconst app = express();\n\napp.get('yourroute', (request, response) => {\n  let sql = 'SELECT * FROM yourtable';\n  let query = db.query(sql, (error, result) => {\n    if(error) {\n      throw error;\n    }\n    console.log(result)\t\t\t\t\t// Use the result you get back here\n  })\n});\n\napp.listen('3000', () => {\n  console.log('Server is listening on port 3000');\n});\n\n", "date": "Dec 17 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Bored Bee", "source_name": null, "source_url": null},
{"title": "express redirect", "code": "app.get('/', (req, res) => {\n  res.redirect('/foo/bar');\n});", "date": "Jul 18 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "nodejs express routing get", "code": "const express = require('express');\nconst mysql = require('mysql');\n\n// Connecting with database\nconst db = mysql.createConnection({\n  host: 'localhost',\t\t\t\t\t// The host you're using\n  user: 'yourusername',\t\t\t\t\t// The username you use to enter database\n  password: 'yourpassword'\t\t\t\t// Your password to your username\n});\n\ndb.connect((error) => {\n  if(error) {\n    throw error;\n  }\n  console.log('MySQL Connected');\n});\n\nconst app = express();\n\napp.get('yourroute', (request, response) => {\n  let sql = 'SELECT * FROM yourtable';\n  let query = db.query(sql, (error, result) => {\n    if(error) {\n      throw error;\n    }\n    console.log(result)\t\t\t\t\t// Use the result you get back here\n  })\n});\n\napp.listen('3000', () => {\n  console.log('Server is listening on port 3000');\n});\n\n", "date": "Dec 17 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Bored Bee", "source_name": null, "source_url": null},
{"title": "nodejs express routing", "code": "// You need to install the following packages\nnpm install --save mysql express\n// And if you don't want to restart your server after every little change\nnpm install -g nodemon", "date": "Dec 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Bored Bee", "source_name": null, "source_url": null},
{"title": "nodejs express hot reload", "code": "$ npm install nodemon -g\n$ nodemon app.js", "date": "Dec 20 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Tony Le Tigre", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/1972242/how-to-auto-reload-files-in-node-js"},
{"title": "nodejs check if express started", "code": "server.listen(80).on('error', function(err) { });", "date": "Apr 11 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "florinrelea", "source_name": null, "source_url": null},
{"title": "How to parse POST requests with express nodejs", "code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-test', (req, res) => {\n    console.log('Got body:', req.body);\n    res.sendStatus(200);\n});\n\napp.listen(8080, () => console.log(`Started server at http://localhost:8080!`));", "date": "May 17 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "m1ke510a", "source_name": null, "source_url": null},
{"title": "node.js express post query string", "code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// POST /somepost/?name=somename\napp.post('/somepost', (req, res) => {\n    console.log('Name:', req.query.name);\n    res.status(200);\n});", "date": "Jun 27 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "FBladePT", "source_name": null, "source_url": null},
{"title": "expressjs query params", "code": "// GET /search?q=tobi+ferret\nconsole.dir(req.query.q)\n// => 'tobi ferret'\n\n// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse\nconsole.dir(req.query.order)\n// => 'desc'\n\nconsole.dir(req.query.shoe.color)\n// => 'blue'\n\nconsole.dir(req.query.shoe.type)\n// => 'converse'\n\n// GET /shoes?color[]=blue&color[]=black&color[]=red\nconsole.dir(req.query.color)\n// => ['blue', 'black', 'red']\n", "date": "May 29 2020", "vote": 6, "tags": ["javascript", "express"], "posted_by": "Lucky Lapwing", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/api.html"},
{"title": "node js with express medium", "code": "npm install express --save", "date": "Jul 11 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Wandering Whale", "source_name": "medium.com", "source_url": "https://medium.com/edureka/expressjs-tutorial-795ad6e65ab3"},
{"title": "nodejs express return image", "code": "var filepath = '~/path/to/file.png'\n\napp.get('/path/for/site', function (req, res) {\n    res.sendFile(filepath);\n})", "date": "Dec 26 2019", "vote": 2, "tags": ["javascript", "express"], "posted_by": "SquarePear", "source_name": null, "source_url": null},
{"title": "express redirect", "code": "res.redirect('/foo/bar')\nres.redirect('http://example.com')\nres.redirect(301, 'http://example.com')\nres.redirect('../login')\n", "date": "Dec 13 2019", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": null, "source_url": null},
{"title": "node js http request express", "code": "npm install request@2.81.0\n", "date": "Feb 04 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Cheerful Chimpanzee", "source_name": "www.twilio.com", "source_url": "https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html"},
{"title": "express get url parameters", "code": "app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});", "date": "Jul 03 2020", "vote": 8, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express param in url", "code": "app.get('/p/:tagId', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.tagId);\n});\n\n// GET /p/5\n// tagId is set to 5\n", "date": "Oct 14 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "SirSundays", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/20089582/how-to-get-a-url-parameter-in-express"},
{"title": "node js express url parameters", "code": "// http://localhost:8080/api/1\napp.get('/api/:version', function(req, res) {\n    res.send(req.params.version);\n});", "date": "Oct 11 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Fair Fowl", "source_name": "www.digitalocean.com", "source_url": "https://www.digitalocean.com/community/tutorials/use-expressjs-to-get-url-and-post-parameters"},
{"title": "express route parameters", "code": "app.get('/',function(req,res)\n{\n    res.send(\"Route path at base address\");\n});", "date": "Sep 20 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Wrong Wasp", "source_name": "modernweb.com", "source_url": "https://modernweb.com/the-basics-of-express-routes/"},
{"title": "node express server static files", "code": "var express = require('express');\nvar app = express();\nvar path = require('path');\n\n//app.use(express.static(__dirname)); // Current directory is root\napp.use(express.static(path.join(__dirname, 'public'))); //  \"public\" off of current is root\n\napp.listen(80);\nconsole.log('Listening on port 80');", "date": "May 11 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "JDog", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/10434001/static-files-with-express-js"},
{"title": "app.use public", "code": "app.use(express.static('public'))\napp.use(express.static('files'))\n", "date": "Apr 02 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "node js express static folder", "code": "// node js -> express -> basic example: static folder, 404 page\n\nconst express = require('express');\nconst path = require('path');\nconst PORT = process.env.PORT || 5000;\n\nconst app = express();\n\nfunction error404(req, res) {\n  res.status(404);\n\n  if (req.accepts('html')) {\n    res.sendFile(path.join(__dirname, 'public/errors/404.html'));\n    return;\n  }\n\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  \n  res.type('txt').send('404 - Not found');\n}\n\napp\n  .use(express.static(path.join(__dirname, 'public')))\n  .use(error404)\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`));\n", "date": "Jul 06 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "app.use public", "code": "express.static(root, [options])\n", "date": "Apr 02 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "express js server", "code": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));", "date": "Sep 29 2020", "vote": 6, "tags": ["javascript", "express"], "posted_by": "amazingcoder444Rblx", "source_name": null, "source_url": null},
{"title": "node.js express", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "date": "Jun 05 2020", "vote": 16, "tags": ["javascript", "express"], "posted_by": "Vincent Lab", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "express js", "code": "\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n\n", "date": "Dec 18 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "The French Doctor", "source_name": "expressjs.com", "source_url": "https://expressjs.com/fr/starter/hello-world.html"},
{"title": "node js express", "code": "basic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           ", "date": "Apr 02 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Arqa", "source_name": null, "source_url": null},
{"title": "express and node", "code": "// Load HTTP module\nconst http = require(\"http\");\n\nconst hostname = \"127.0.0.1\";\nconst port = 8000;\n\n// Create HTTP server \nconst server = http.createServer((req, res) => {\n\n   // Set the response HTTP header with HTTP status and Content type\n   res.writeHead(200, {'Content-Type': 'text/plain'});\n   \n   // Send the response body \"Hello World\"\n   res.end('Hello World\\n');\n});\n\n// Prints a log once the server starts listening\nserver.listen(port, hostname, () => {\n   console.log(`Server running at http://${hostname}:${port}/`);\n})\n", "date": "Nov 23 2019", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Swallow Tail Gull", "source_name": null, "source_url": null},
{"title": "node js express", "code": "// node js -> express -> basic example: static folder, 404 page\n\nconst express = require('express');\nconst path = require('path');\nconst PORT = process.env.PORT || 5000;\n\nconst app = express();\n\nfunction error404(req, res) {\n  res.status(404);\n\n  if (req.accepts('html')) {\n    res.sendFile(path.join(__dirname, 'public/errors/404.html'));\n    return;\n  }\n\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  \n  res.type('txt').send('404 - Not found');\n}\n\napp\n  .use(express.static(path.join(__dirname, 'public')))\n  .use(error404)\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`));\n", "date": "Jun 07 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "node express verify account link api", "code": "var emailRegex = /^[-!#$%&'*+\\/0-9=?A-Z^_a-z{|}~](\\.?[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/;\n\nfunction isEmailValid(email) {\n    if (!email)\n        return false;\n\n    if(email.length>254)\n        return false;\n\n    var valid = emailRegex.test(email);\n    if(!valid)\n        return false;\n\n    // Further checking of some things regex can't handle\n    var parts = email.split(\"@\");\n    if(parts[0].length>64)\n        return false;\n\n    var domainParts = parts[1].split(\".\");\n    if(domainParts.some(function(part) { return part.length>63; }))\n        return false;\n\n    return true;\n}\n", "date": "Jan 14 2021", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Worrisome Wolverine", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/52456065/how-to-format-and-validate-email-node-js"},
{"title": "node.js express", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "date": "Jun 05 2020", "vote": 16, "tags": ["javascript", "express"], "posted_by": "Vincent Lab", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "express js", "code": "\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n\n", "date": "Dec 18 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "The French Doctor", "source_name": "expressjs.com", "source_url": "https://expressjs.com/fr/starter/hello-world.html"},
{"title": "node js express", "code": "basic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           ", "date": "Apr 02 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Arqa", "source_name": null, "source_url": null},
{"title": "express and node", "code": "// Load HTTP module\nconst http = require(\"http\");\n\nconst hostname = \"127.0.0.1\";\nconst port = 8000;\n\n// Create HTTP server \nconst server = http.createServer((req, res) => {\n\n   // Set the response HTTP header with HTTP status and Content type\n   res.writeHead(200, {'Content-Type': 'text/plain'});\n   \n   // Send the response body \"Hello World\"\n   res.end('Hello World\\n');\n});\n\n// Prints a log once the server starts listening\nserver.listen(port, hostname, () => {\n   console.log(`Server running at http://${hostname}:${port}/`);\n})\n", "date": "Nov 23 2019", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Swallow Tail Gull", "source_name": null, "source_url": null},
{"title": "node js express", "code": "// node js -> express -> basic example: static folder, 404 page\n\nconst express = require('express');\nconst path = require('path');\nconst PORT = process.env.PORT || 5000;\n\nconst app = express();\n\nfunction error404(req, res) {\n  res.status(404);\n\n  if (req.accepts('html')) {\n    res.sendFile(path.join(__dirname, 'public/errors/404.html'));\n    return;\n  }\n\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  \n  res.type('txt').send('404 - Not found');\n}\n\napp\n  .use(express.static(path.join(__dirname, 'public')))\n  .use(error404)\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`));\n", "date": "Jun 07 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "require express server.js", "code": "const\u00a0express\u00a0=\u00a0require('express')const\u00a0app\u00a0=\u00a0express()\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World')})\u00a0app.listen(3000)", "date": "Mar 19 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "install express globally", "code": "$ npm install express --no-save\n", "date": "Apr 20 2020", "vote": 9, "tags": ["javascript", "express", "shell"], "posted_by": "Unsightly Unicorn", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/installing.html"},
{"title": "npm express", "code": "$\u00a0npm\u00a0install\u00a0express", "date": "Jul 31 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Innocent Ibex", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "npm express", "code": "// npm install express\nconst\u00a0express\u00a0=\u00a0require('express');\nconst\u00a0app\u00a0=\u00a0express();\n\napp.get('/',\u00a0(req,\u00a0res)=>\u00a0{\n  res.send('Hello\u00a0World');\n})\u00a0\n\napp.listen(3000,()=>{\n console.log(\"starting...\");\n});", "date": "Jun 19 2020", "vote": 9, "tags": ["javascript", "express"], "posted_by": "Jules", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "node express start code", "code": "\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n", "date": "Feb 28 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Rich Raven", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "node express server static files", "code": "var express = require('express');\nvar app = express();\nvar path = require('path');\n\n//app.use(express.static(__dirname)); // Current directory is root\napp.use(express.static(path.join(__dirname, 'public'))); //  \"public\" off of current is root\n\napp.listen(80);\nconsole.log('Listening on port 80');", "date": "May 11 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "JDog", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/10434001/static-files-with-express-js"},
{"title": "node express post request json", "code": "var express = require('express');\n\nvar app = express();\n\napp.use(express.json()); // built-in middleware for express\n\napp.post('/', function(request, response){\n \tlet myJson = request.body;      // your JSON\n\tlet myValue = request.body.myKey;\t// a value from your JSON\n\tresponse.send(myJson);\t // echo the result back\n});\n\napp.listen(3000);", "date": "Mar 29 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "just-saved-you-a-stackoverflow-visit", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/10005939/how-do-i-consume-the-json-post-data-in-an-express-application"},
{"title": "node express mongo boilerplate with jwt", "code": "git clone https://github.com/hagopj13/node-express-mongoose-boilerplate.git", "date": "Nov 09 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Perfect Peccary", "source_name": null, "source_url": null},
{"title": "node express table view", "code": "<table>\n  <tr>\n    <th>id</th><th>Name</th>\n  </tr>\n\n  <% for (var i = 0; i < data.length; i++) { %>\n    <tr>\n      <td><%= data[i].id %></td>\n      <td><%= data[i].name %></td>\n    </tr>    \n  <% } %>\n</table>\n", "date": "Sep 30 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Panicky Panther", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/34809975/displaying-a-json-dataset-as-a-table-with-node-js-and-express"},
{"title": "node express cors headers", "code": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n", "date": "Mar 24 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Adventurous Aardvark", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "express js cors", "code": "var express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})", "date": "Nov 13 2020", "vote": 20, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "allow cors express", "code": "app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});", "date": "Jun 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": null, "source_url": null},
{"title": "node express chat app", "code": "const app = require('express')();const http = require('http').createServer(app);app.get('/', (req, res) => {  res.send('<h1>Hello world</h1>');});http.listen(3000, () => {  console.log('listening on *:3000');});", "date": "Jan 21 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "TheProgrammer", "source_name": "socket.io", "source_url": "https://socket.io/get-started/chat/"},
{"title": "simple socket.io chat", "code": "npm install socket.io", "date": "Dec 02 2020", "vote": 0, "tags": ["javascript", "express", "whatever"], "posted_by": "Real Reindeer", "source_name": "socket.io", "source_url": "https://socket.io/get-started/chat/"},
{"title": "no special characters express validator", "code": "body.check(\"password\", \"...\").matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/, \"i\");\n", "date": "May 02 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Xenophobic Xenomorph", "source_name": null, "source_url": null},
{"title": "node express dynamic route and error handler", "code": "app.use(function (req, res, next) {\n  res.status(404).send(\"Sorry can't find that!\")\n})\n", "date": "Jan 28 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/faq.html"},
{"title": "ngingx proxy express get real ip", "code": "1) app.set('trust proxy', true) in your Express app.\n2) Add proxy_set_header X-Forwarded-For $remote_addr in\n  the Nginx configuration for your server block.\n// sudo nano /etc/nginx/sites-available/default", "date": "Feb 05 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "florinrelea", "source_name": null, "source_url": null},
{"title": "mongoose and express get requests", "code": "app.get('/api/all', (req,res) =>{\n     Model.find({})\n       .then(model=> {\n         res.json(model)\n     }).catch(error=>{\n         res.json(error)\n        }\n     })\n})", "date": "Nov 29 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Poised Platypus", "source_name": null, "source_url": null},
{"title": "express hello world", "code": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express", "date": "Jul 17 2020", "vote": 35, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "npm express", "code": "$\u00a0npm\u00a0install\u00a0express", "date": "Jul 31 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Innocent Ibex", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "express js server", "code": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));", "date": "Sep 29 2020", "vote": 6, "tags": ["javascript", "express"], "posted_by": "amazingcoder444Rblx", "source_name": null, "source_url": null},
{"title": "node.js express", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "date": "Jun 05 2020", "vote": 15, "tags": ["javascript", "express"], "posted_by": "Vincent Lab", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "express js", "code": "\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n\n", "date": "Dec 18 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "The French Doctor", "source_name": "expressjs.com", "source_url": "https://expressjs.com/fr/starter/hello-world.html"},
{"title": "node express", "code": "npm install express --save", "date": "Jan 12 2021", "vote": -1, "tags": ["javascript", "express"], "posted_by": "Almabek", "source_name": null, "source_url": null},
{"title": "MIME type Error CSS in nodejs Express", "code": "app.use(express.static(__dirname + '/public'));\n", "date": "May 02 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Colorful Cobra", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/48248832/stylesheet-not-loaded-because-of-mime-type"},
{"title": "manage favicon with express app", "code": "var express = require('express')\nvar favicon = require('serve-favicon')\nvar path = require('path')\n\nvar app = express()\napp.use(favicon(path.join(__dirname, 'public', 'favicon.ico')))\n\n// Add your routes here, etc.\n\napp.listen(3000)\n", "date": "Dec 12 2019", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": null, "source_url": null},
{"title": "express database", "code": "Some Databases : \n\n1.https://pouchdb.com/ - Light Weight - Alot of Functions\n2.https://dbdb.io/db/nedb - Light Weight - Easy To Use \n3.https://www.mongodb.com/ - Best DB - Complex To Use", "date": "Feb 06 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Undefined", "source_name": null, "source_url": null},
{"title": "how to access a database in express", "code": "var mysql = require('mysql')\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'dbuser',\n  password: 's3kreee7',\n  database: 'my_db'\n})\n\nconnection.connect()\n\nconnection.query('SELECT 1 + 1 AS solution', function (err, rows, fields) {\n  if (err) throw err\n\n  console.log('The solution is: ', rows[0].solution)\n})\n\nconnection.end()\n", "date": "Nov 21 2019", "vote": 0, "tags": ["javascript", "express"], "posted_by": "European Red Squirrel", "source_name": null, "source_url": null},
{"title": "mongodbClint express", "code": "var MongoClient = require('mongodb').MongoClient\n\nMongoClient.connect('mongodb://localhost:27017/animals', function (err, db) {\n  if (err) throw err\n\n  db.collection('mammals').find().toArray(function (err, result) {\n    if (err) throw err\n\n    console.log(result)\n  })\n})\n", "date": "Feb 09 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Obedient Orangutan", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/database-integration.html#mongodb"},
{"title": "jsdoc for express routes", "code": "/** Express router providing user related routes\n * @module routers/users\n * @requires express\n */\n\n/**\n * express module\n * @const\n */\nconst express = require('express');\n\n/**\n * Express router to mount user related functions on.\n * @type {object}\n * @const\n * @namespace usersRouter\n */\nconst router = express.Router();\n\n/**\n * Route serving login form.\n * @name get/login\n * @function\n * @memberof module:routers/users~usersRouter\n * @inner\n * @param {string} path - Express path\n * @param {callback} middleware - Express middleware.\n */\nrouter.get('/login', function(req, res, next) {\n  res.render('login', {title: 'Login', message: 'You must login'});\n});\n", "date": "Oct 12 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Cruel Cowfish", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/31818538/jsdocs-documenting-node-js-express-routes"},
{"title": "sample express app", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n", "date": "May 12 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "require express server.js", "code": "const\u00a0express\u00a0=\u00a0require('express')const\u00a0app\u00a0=\u00a0express()\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World')})\u00a0app.listen(3000)", "date": "Mar 19 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "js express server", "code": "const http = require('http')\nconst express = require('express')\n\nconst app = express()\nconst server = http.Server(app)\napp.set('port', 8888)\nserver.listen(8888)\n\napp.get('/', (req, res) => {\n  res.json({teste: true})\n})\n", "date": "Jan 30 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Tarik", "source_name": null, "source_url": null},
{"title": "join method in express", "code": "app.use('/static', express.static(path.join(__dirname, 'public')))\n", "date": "Nov 27 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "Hilarious Hippopotamus", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "install express", "code": "$ npm install express --save\n", "date": "Mar 02 2021", "vote": 1, "tags": ["javascript", "express", "shell"], "posted_by": "Almabek", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/installing.html"},
{"title": "install express", "code": "npm i express", "date": "Oct 03 2020", "vote": 3, "tags": ["javascript", "express", "shell"], "posted_by": "amazingcoder444Rblx", "source_name": null, "source_url": null},
{"title": "setup node js express basic setup", "code": "npm init -y\nnpm i express\n", "date": "Jul 03 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "node express setup", "code": "yarn add express \nyarn add --dev @types/express", "date": "Mar 30 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Uninterested Unicorn", "source_name": null, "source_url": null},
{"title": "joi in node and express", "code": "npm init -y\nnpm install --save express body-parser morgan joi lodash\n", "date": "Jul 19 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Philan ISithembiso", "source_name": "www.digitalocean.com", "source_url": "https://www.digitalocean.com/community/tutorials/node-api-schema-validation-with-joi"},
{"title": "list pci express version command line", "code": "lspci\n \n# PCI device details\nlspci -vv", "date": "Nov 20 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Homeless Hawk", "source_name": "dannyda.com", "source_url": "https://dannyda.com/2020/07/23/how-to-find-pci-express-pci-e-version-generation-from-linux-system-via-command-line-terminal/"},
{"title": "ISS proxy express", "code": "iisexpress-proxy https://localhost:51123 to 3000\n", "date": "Jun 01 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Blue Bird", "source_name": "github.com", "source_url": "https://github.com/icflorescu/iisexpress-proxy"},
{"title": "insert a data into mongo using express", "code": "var mongoose = require(\"mongoose\");mongoose.Promise = global.Promise;mongoose.connect(\"mongodb://localhost:27017/node-demo\");", "date": "Nov 08 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Big Jojo", "source_name": "codeburst.io", "source_url": "https://codeburst.io/hitchhikers-guide-to-back-end-development-with-examples-3f97c70e0073"},
{"title": "initialize express app", "code": "npx express-generator", "date": "Aug 15 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Muddy Macaw", "source_name": null, "source_url": null},
{"title": "generate express app", "code": "$ npx express-generator\n", "date": "Sep 03 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Anxious Addax", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/generator.html"},
{"title": "express.js server", "code": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000", "date": "Jan 13 2021", "vote": 48, "tags": ["javascript", "express"], "posted_by": "Mehedi Islam Ripon", "source_name": null, "source_url": null},
{"title": "javascript express server", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})", "date": "Apr 15 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Comfortable Caribou", "source_name": "expressjs.com", "source_url": "https://expressjs.com"},
{"title": "javascript express setting up a server", "code": "There are several steps for setting up a basic Express Server:\n\n1. Run npm init -y\n2. Install your dependencies (express)\n3. Create a .gitignore file\n4. Add node_modules to your .gitignore\n5. Create the server directory\n6. Create your index file\n7. Require your dependencies\n8. Declare your app variable\n9. Declare your listen port\n10. invoke the listen method and add a console log to the callback\n11. run nodemon server/index.js in your terminal\n12. success\n\n", "date": "Apr 27 2021", "vote": 0, "tags": ["javascript", "express", "whatever"], "posted_by": "Delightful Dormouse", "source_name": "github.com", "source_url": "https://github.com/casesensative/ecommerce-api"},
{"title": "in express how do you set the location header", "code": "res.location('/customers/' + inst._id)1", "date": "Mar 13 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/14943607/how-to-set-the-location-response-http-header-in-express-framework"},
{"title": "iis express gzip", "code": "//Start command prompt \n//Go to IIS Express installation folder (%PROGRAMFILES%\\IIS Express)\n//Run following command:\nappcmd set config -section:urlCompression /doDynamicCompression:true", "date": "Jun 29 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Jean Dinh", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/10102743/gzip-response-on-iis-express"},
{"title": "https with express", "code": "const fs = require('fs');\nconst https = require('https');\n\nconst app = require('express')();\napp.get('*', (req, res) => res.send('<h1>Hello, World</h1>'));\n\nconst server = https.createServer({\n  key: fs.readFileSync(`${__dirname}/localhost-key.pem`, 'utf8'),\n  cert: fs.readFileSync(`${__dirname}/localhost.pem`, 'utf8')\n}, app);\n\nawait server.listen(443);", "date": "Feb 13 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Black Hole", "source_name": "masteringjs.io", "source_url": "https://masteringjs.io/tutorials/express/https"},
{"title": "express http to https", "code": "var\u00a0express\u00a0=\u00a0require('express');var\u00a0app\u00a0=\u00a0express();\u00a0var\u00a0redirectToHTTPS\u00a0=\u00a0require('express-http-to-https').redirectToHTTPS\u00a0//\u00a0Don't\u00a0redirect\u00a0if\u00a0the\u00a0hostname\u00a0is\u00a0`localhost:port`\u00a0or\u00a0the\u00a0route\u00a0is\u00a0`/insecure`app.use(redirectToHTTPS([/localhost:(\\d{4})/],\u00a0[/\\/insecure/],\u00a0301));\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World!');});\u00a0app.get('/insecure',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Dangerous!');});\u00a0app.listen(3000,\u00a0function\u00a0()\u00a0{\u00a0\u00a0console.log('Example\u00a0app\u00a0listening\u00a0on\u00a0port\u00a03000!');});\u00a0app.listen(8080,\u00a0function\u00a0()\u00a0{\u00a0\u00a0console.log('Example\u00a0app\u00a0listening\u00a0on\u00a0port\u00a08080\u00a0insecurely!');});", "date": "Apr 02 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Uninterested Unicorn", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express-http-to-https"},
{"title": "how to use custom stylesheets express node", "code": "app.use(express.static(__dirname + '/public'));\n\n<link rel='stylesheet' href='/style.css' />", "date": "May 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Yucky Yacare", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/13486838/cant-get-stylesheet-to-work-with-ejs-for-node-js"},
{"title": "access-control-allow-origin nodejs express", "code": "// Add headers\napp.use(function (req, res, next) {\n\n    // Website you wish to allow to connect\n    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888');\n\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader('Access-Control-Allow-Credentials', true);\n\n    // Pass to next layer of middleware\n    next();\n});", "date": "Jul 08 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Precious Plover", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/18310394/no-access-control-allow-origin-node-apache-port-issue"},
{"title": "how we can use express to access control allow origin", "code": "Access-Control-Allow-Origin: *", "date": "Apr 12 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Embarrassed Eagle", "source_name": "medium.com", "source_url": "https://medium.com/zero-equals-false/using-cors-in-express-cac7e29b005b"},
{"title": "how to set view engine in express", "code": "app.set(\"view engine\", \"ejs\");\napp.set(\"views\", path.join(__dirname, \"views\"));", "date": "Jan 22 2021", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Mehedi Islam Ripon", "source_name": null, "source_url": null},
{"title": "How to parse POST requests with express nodejs", "code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-test', (req, res) => {\n    console.log('Got body:', req.body);\n    res.sendStatus(200);\n});\n\napp.listen(8080, () => console.log(`Started server at http://localhost:8080!`));", "date": "May 17 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "m1ke510a", "source_name": null, "source_url": null},
{"title": "how to make an express server", "code": "// this is your code\n// ZDev1#4511 on discord if you want more help!\n// first you should install express in the terminal\n// `npm i express`.\nconst express = require('express');\nconst app = express();\n\n// route\napp.get('/', (req,res)=>{\n  // Sending This is the home page! in the page\n  res.send('This is the home page!');\n});\n\n// Listening to the port\nlet PORT = 3000;\napp.listen(PORT)\n\n// FINISH!", "date": "Jul 03 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "ZDev1", "source_name": null, "source_url": null},
{"title": "http header express", "code": "app.get('/', (req, res) => {\n  req.header('User-Agent')\n})\n// Use the Request.header() method to access\n//one individual request header\u2019s value", "date": "Apr 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Creepy Copperhead", "source_name": "flaviocopes.com", "source_url": "https://flaviocopes.com/express-headers/"},
{"title": "how to know if express is intalled", "code": "npm ls express\n", "date": "Feb 08 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Alive Angelfish", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/17629683/node-cannot-find-express-module/17630440"},
{"title": "how to integrate vuejs with nodejs and express", "code": "const Joi = require('joi');\nconst db = require('./connection');\n\u00a0\nconst schema = Joi.object().keys({\n\u00a0\u00a0\u00a0\u00a0username: Joi.string().alphanum().required(),\n\u00a0\u00a0\u00a0\u00a0subject: Joi.string().required(),\n\u00a0\u00a0\u00a0\u00a0message: Joi.string().max(500).required(),\n\u00a0\u00a0\u00a0\u00a0imageURL: Joi.string().uri({\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0scheme: [\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/https?/\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\n\u00a0\u00a0\u00a0\u00a0})\n});\n\u00a0\nconst messages = db.get('messages');\n\u00a0\nfunction getAll() {\n\u00a0\u00a0\u00a0\u00a0return messages.find();\n}\n\u00a0\nfunction create(message) {\n\u00a0\u00a0\u00a0\u00a0if (!message.username) message.username = 'Anonymous';\n\u00a0\n\u00a0\u00a0\u00a0\u00a0const result = Joi.validate(message, schema);\n\u00a0\u00a0\u00a0\u00a0if (result.error == null) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message.created = new Date();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return messages.insert(message);\n\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Promise.reject(result.error);\n\u00a0\u00a0\u00a0\u00a0}\n}\n\u00a0\nmodule.exports = {\n\u00a0\u00a0\u00a0\u00a0create,\n\u00a0\u00a0\u00a0\u00a0getAll\n};\n", "date": "Feb 10 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ugliest Unicorn", "source_name": "vegibit.com", "source_url": "https://vegibit.com/vue-js-express-tutorial/"},
{"title": "How to send form data from react to express", "code": "const url = localhost:4000/api/users/register;\nconst usersData= [];\n\nlet getData = () => {\naxios.get(url)\n   .then(res => usersData.push(res.data))\n   .catch(err => console.log(err.data))\n}", "date": "Jul 13 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Obnoxious Opossum", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/51115640/how-to-send-form-data-from-react-to-express/51116082"},
{"title": "How to send form data from react to express", "code": "const reactData = [{ id: 1, name:' Tom'}, { id: 2, name:' Sarah'}];\nconst url = localhost:4000/api/users/register;\n\nlet sendData = () => {\naxios.post(url, reactData)\n   .then(res => console.log('Data send'))\n   .catch(err => console.log(err.data))\n}", "date": "Jul 13 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Obnoxious Opossum", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/51115640/how-to-send-form-data-from-react-to-express/51116082"},
{"title": "how to handle all error of all router in express", "code": "// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n    app.use(function (err, req, res, next) {\n        res.status(err.status || 500);\n        res.render('error.ejs', {\n            message: err.message,\n            error: err\n        });\n    });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function (err, req, res, next) {\n    res.status(err.status || 500);\n    res.render('error', {\n        message: err.message,\n        error: {}\n    });\n});\n", "date": "Dec 03 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Tough Tortoise", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/43356705/node-js-express-error-handling-middleware-with-router"},
{"title": "how to handle all error of all router in express", "code": "var router = express.Router();\n\nrouter.get('/req1', handleErrorAsync(async (req, res, next) => {\n   let result = await someAsyncFunction1();\n   if(result){\n       // res.send whatever\n   }\n}));\nrouter.post('/req2', handleErrorAsync(async (req, res, next) => {\n    let result = await someAsyncFunction2(req.body.param1);\n    if(result){\n        // res.send whatever\n    }\n}));\nrouter.post('/req3', handleErrorAsync(async (req, res, next) => {\n    let result = await someAsyncFunction3(req.body.param1, req.body.param2);\n    if(result){\n        // res.send whatever\n    }\n}));\n\nmodule.exports = router;\n", "date": "Dec 03 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Tough Tortoise", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/43356705/node-js-express-error-handling-middleware-with-router"},
{"title": "how to handle all error of all router in express", "code": "const handleErrorAsync = func => (req, res, next) => {\n    func(req, res, next).catch((error) => next(error));\n};\n", "date": "Dec 03 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Tough Tortoise", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/43356705/node-js-express-error-handling-middleware-with-router"},
{"title": "javascript express setting up a server", "code": "There are several steps for setting up a basic Express Server:\n\n1. Run npm init -y\n2. Install your dependencies (express)\n3. Create a .gitignore file\n4. Add node_modules to your .gitignore\n5. Create the server directory\n6. Create your index file\n7. Require your dependencies\n8. Declare your app variable\n9. Declare your listen port\n10. invoke the listen method and add a console log to the callback\n11. run nodemon server/index.js in your terminal\n12. success\n\n", "date": "Apr 27 2021", "vote": 0, "tags": ["javascript", "express", "whatever"], "posted_by": "Delightful Dormouse", "source_name": "github.com", "source_url": "https://github.com/casesensative/ecommerce-api"},
{"title": "how to get data send from a form express", "code": "const express = require('express')\nconst app = express()\n\napp.use(express.urlencoded())\n", "date": "May 05 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Glamorous Goose", "source_name": "flaviocopes.com", "source_url": "https://flaviocopes.com/express-forms/"},
{"title": "how to filter array objesct in express node js", "code": "var data = [\n  // the array to be filtered\n];\n\nvar filteredArray = data.filter(item => (item.name === req.query.q));\n", "date": "Feb 24 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Sparkling Skimmer", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/36875934/filter-object-array-via-nodejs"},
{"title": "How to Delete Comment from Post on Node, express and Mongoose and Ajax", "code": "// How to Delete Comment from Post on Node, express and Mongoose and Ajax\n\nYou need to know both the postId and the commentId to be able to delete the comment from posts collection. Also it would be good to delete the comment inside the comments collection.\n\nSo change your delete route to include postId and commentId as req.params. You can delete a comment from posts using the findByIdAndUpdate method and $pull operator.\n\nrouter.delete(\"/comments/:postId/:commentId\", async function (req, res) {\n  try {\n    const post = await Post.findByIdAndUpdate(\n      req.params.postId,\n      {\n        $pull: { comments: req.params.commentId },\n      },\n      { new: true }\n    );\n\n    if (!post) {\n      return res.status(400).send(\"Post not found\");\n    }\n\n    await Comment.findByIdAndDelete(req.params.commentId);\n\n    res.send(\"Success\");\n  } catch (err) {\n    console.log(err);\n    res.status(500).send(\"Something went wrong\");\n  }\n});\nTEST\n\nLet's say we have this post document with 3 comments.\n\nPosts:\n\n{\n    \"_id\" : ObjectId(\"5e8b10c49ae619486094ed10\"),\n    \"comments\" : [\n        ObjectId(\"5e8b104f9ae619486094ed0d\"),\n        ObjectId(\"5e8b10599ae619486094ed0e\"),\n        ObjectId(\"5e8b105e9ae619486094ed0f\")\n    ],\n    \"title\" : \"Title\",\n    \"description\" : \"Description...\",\n    \"from\" : \"From\",\n    \"postImage\" : \"Post Image\",\n    \"createdAt\" : ISODate(\"2020-04-06T14:21:40.884+03:00\")\n}\nComments:\n\n{\n    \"_id\" : ObjectId(\"5e8b105e9ae619486094ed0f\"),\n    \"message\" : \"Comment 3\"\n},\n\n{\n    \"_id\" : ObjectId(\"5e8b10599ae619486094ed0e\"),\n    \"message\" : \"Comment 2\"\n},\n{\n    \"_id\" : ObjectId(\"5e8b104f9ae619486094ed0d\"),\n    \"message\" : \"Comment 1\"\n}\nIf we want to delete the comment with _id:5e8b10599ae619486094ed0e, we need to send a DELETE request to our route using url like this:\n\nhttp://localhost:3000/posts/comments/5e8b10c49ae619486094ed10/5e8b10599ae619486094ed0e\n5e8b10c49ae619486094ed10 is the postId, 5e8b10599ae619486094ed0e is the commentId.\n\nResult will be like this:\n\nPosts:\n\n{\n    \"_id\" : ObjectId(\"5e8b10c49ae619486094ed10\"),\n    \"comments\" : [\n        ObjectId(\"5e8b104f9ae619486094ed0d\"),\n        ObjectId(\"5e8b105e9ae619486094ed0f\")\n    ],\n    \"title\" : \"Title\",\n    \"description\" : \"Description...\",\n    \"from\" : \"From\",\n    \"postImage\" : \"Post Image\",\n    \"createdAt\" : ISODate(\"2020-04-06T14:21:40.884+03:00\")\n}\nComments:\n\n{\n    \"_id\" : ObjectId(\"5e8b105e9ae619486094ed0f\"),\n    \"message\" : \"Comment 3\"\n},\n{\n    \"_id\" : ObjectId(\"5e8b104f9ae619486094ed0d\"),\n    \"message\" : \"Comment 1\"\n}\nShare\nFollow\nanswered Apr 6 '20 at 11:37\n\nSuleymanSah\n12.8k55 gold badges1717 silver badges4242 bronze badges\n1\n@SuleymanSahThank you so much for taking your time to explain to me how it works, i really appreciate it. I did exactly what you said with the code you gave me above, and changed my link to include post id like this ` <a class=\"delete-comment\" href=\"#\" data-id=\"<%=post.id%>/<%=item._id%>\">Delete</a> ` and everything is \u2013 Chukwuma Kingsley Apr 6 '20 at 11:58\n", "date": "Apr 10 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Frail Fox", "source_name": null, "source_url": null},
{"title": "How to Create a Secure REST API with Node.js and Express", "code": "/*\n    This code comes from Vincent Lab\n    And it has a video version linked here: https://www.youtube.com/watch?v=Tw5LupcpKS4\n*/\n\n// Import dependencie\nconst express = require(\"express\");\n\n// Setup the express server\nconst app = express();\nconst port = 3000;\n\n// Import middlewares into express\napp.use(express.json({ limit: \"100mb\" }));\n\n// Import routes\nconst authRouter = require(\"./routes/auth\");\nconst messagesRouter = require(\"./routes/messages\");\n\n// Setup all the routes\napp.use(\"/api/messages\", messagesRouter);\napp.use(\"/api/auth\", authRouter);\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Listening on port ${port}...`);\n});", "date": "Apr 20 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Vincent Lab", "source_name": "www.youtube.com", "source_url": "https://www.youtube.com/watch?v=Tw5LupcpKS4"},
{"title": "How to parse POST requests with express nodejs", "code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-test', (req, res) => {\n    console.log('Got body:', req.body);\n    res.sendStatus(200);\n});\n\napp.listen(8080, () => console.log(`Started server at http://localhost:8080!`));", "date": "May 17 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "m1ke510a", "source_name": null, "source_url": null},
{"title": "How to access the request body when POSTing using Node.js and Express", "code": "const express = require('express');\n\nconst app = express();\n\napp.use(express.json({extended: false})); //This is the line that you want to add\n\napp.post('/postroute', (req, res) => {\n    console.log('body :', req.body);\n    res.sendStatus(200);\n});", "date": "Jul 18 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "how to access a database in express", "code": "var MongoClient = require('mongodb').MongoClient\n\nMongoClient.connect('mongodb://localhost:27017/animals', function (err, client) {\n  if (err) throw err\n\n  var db = client.db('animals')\n\n  db.collection('mammals').find().toArray(function (err, result) {\n    if (err) throw err\n\n    console.log(result)\n  })\n})\n", "date": "Nov 21 2019", "vote": 1, "tags": ["javascript", "express"], "posted_by": "European Red Squirrel", "source_name": null, "source_url": null},
{"title": "how to access a database in express", "code": "var mysql = require('mysql')\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'dbuser',\n  password: 's3kreee7',\n  database: 'my_db'\n})\n\nconnection.connect()\n\nconnection.query('SELECT 1 + 1 AS solution', function (err, rows, fields) {\n  if (err) throw err\n\n  console.log('The solution is: ', rows[0].solution)\n})\n\nconnection.end()\n", "date": "Nov 21 2019", "vote": 0, "tags": ["javascript", "express"], "posted_by": "European Red Squirrel", "source_name": null, "source_url": null},
{"title": "how can i use sessions in express js", "code": "const express = require('express')\nconst session = require('express-session')\n\nconst app = express()\napp.use(session({\n  'secret': '343ji43j4n3jn4jk3n'\n}))\n", "date": "Mar 04 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Poised Plover", "source_name": "flaviocopes.com", "source_url": "https://flaviocopes.com/express-sessions/"},
{"title": "how to download express without view", "code": "npm install express-generator --no-view", "date": "May 24 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Clear Chimpanzee", "source_name": "expressjs.com", "source_url": "https://expressjs.com/fr/starter/generator.html"},
{"title": "graphql upload express", "code": "\n//resolvers.js\nexport default {\n\tQuery: {\n\t\tusersActivation() {\n\t\t\treturn 'Hello Wordl'\n\t\t}\n\t},\n\tMutation: {\n\t\tuploadFile: async (parent, { file }) => {\n\t\t\tconst { filename, createReadStream } = await file.promise\n\t\t\tfileUpload({ filename, stream: createReadStream() })\n\t\t\treturn true\n\t\t}\n\t}\n}\n\n//typedefs.js\nexport default gql(`\n\t scalar Upload\n\n\t type Query {\n\t\thelloWordl : String!\n\t }\n\n\ttype Mutation {\n\t\tuploadFile(file: Upload!): Boolean\n\t  }\n\t`)\n\n// util.upload.js\nconst uploadFile = ({ filename, stream }) => {\n\tstream\n\t\t.pipe(createWriteStream(resolve(process.cwd(), `src/images/${filename}`)))\n\t\t.on('finish', () => Promise.resolve())\n\t\t.on('error', Promise.reject)\n}\n\nconst validateFile = ({ filename, stream }) => {\n\tconst extFile = filename.replace('.', '')\n    \n\tconst extPattern = /(jpg|jpeg|png|gif|svg)/gi.test(extFile)\n\tif (!extPattern) throw new TypeError('Image format is not valid')\n\n\tconst fileExits = existsSync(resolve(process.cwd(), `src/images/${filename}`))\n\tif (!fileExits) return uploadFile({ filename, stream })\n\n\tunlink(resolve(process.cwd(), `src/images/${filename}`), (error) => {\n\t\tif (error) throw error\n\t\treturn uploadFile({ filename, stream })\n\t})\n}\n\nexport const fileUpload = ({ filename, stream }) =>\n\tfilename ? validateFile({ filename, stream }) : new Error('Image is required')\n\n\n// request query playground\nmutation UPLOAD_FILE($file: Upload!) {\n  uploadFile(file: $file)\n}", "date": "Feb 01 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Inexpensive Ibis", "source_name": null, "source_url": null},
{"title": "express get query params from url", "code": "GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})", "date": "Jul 03 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/17007997/how-to-access-the-get-parameters-after-in-express"},
{"title": "express get url parameters", "code": "app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});", "date": "Jul 03 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "node js express url parameters", "code": "// http://localhost:8080/api/1\napp.get('/api/:version', function(req, res) {\n    res.send(req.params.version);\n});", "date": "Oct 11 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Fair Fowl", "source_name": "www.digitalocean.com", "source_url": "https://www.digitalocean.com/community/tutorials/use-expressjs-to-get-url-and-post-parameters"},
{"title": "get url params in express", "code": "app.get(\"/users/:id\",(req,res)=>{ // https://domain.com/users/817178\n  const id = req.params.id ; //  817178\n})\napp.get(\"/users?name=anas\",(req,res)=> { // https://domain.com/users?name=anas\nconst name  = req.query.name ; //anas\n})        ", "date": "Apr 22 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Donate ", "source_name": null, "source_url": null},
{"title": "get in expressjs", "code": "const express = require('express');\nconst app = express();\napp.get('/', async (req, res)=>{\n  req.(\"request is sent\");\nres.send(\"Message here...\");\n})", "date": "Apr 13 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Muddy Mouse", "source_name": null, "source_url": null},
{"title": "express get", "code": "app.get('/index', (req, res) => {\n    res.render('index')\n})", "date": "Feb 22 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Comfortable Cottonmouth", "source_name": null, "source_url": null},
{"title": "sample express app", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n", "date": "May 12 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "initialize express app", "code": "npx express-generator", "date": "Aug 15 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Muddy Macaw", "source_name": null, "source_url": null},
{"title": "generate express app", "code": "$ npx express-generator\n", "date": "Sep 03 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Anxious Addax", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/generator.html"},
{"title": "formidable express example", "code": "// make this a middleware function, \n// then put it on the route like you used jwt,\n// then get the value with req.users.\n\nconst { IncomingForm } = require('formidable')\nconst { resolve } = require('path')\nconst { existsSync, writeFileSync } = require('fs')\n\nmodule.exports = (req, res, next) => {\n  const form = new IncomingForm({\n    maxFileSize: 1 * 1024 * 1024,\n    keepExtensions: true\n  })\n\n  form.parse(req, (error, fields, file) => {\n    if (error) return next(error)\n    const patternFile = /\\.(jpg|jpeg|png|svg|gif|raw|webp)$/gi.test(file.productImage.name)\n\n    if (patternFile) {\n      const pathFile = resolve(process.cwd(), 'servers/uploads/', file.productImage.name)\n      const fileExits = existsSync(pathFile)\n      if (!fileExits) {\n        writeFileSync(pathFile)\n        req.users = JSON.parse(JSON.stringify({ fields, file }))\n        return next()\n      }\n      req.users = JSON.parse(JSON.stringify({ fields, file }))\n      return next()\n    }\n  })\n}\n", "date": "Nov 24 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "formidable express", "code": "// make this a middleware function, \n// then put it on the route like you used jwt,\n// then get the value with req.users.\n\nconst { IncomingForm } = require('formidable')\nconst { resolve } = require('path')\nconst { existsSync, writeFileSync } = require('fs')\n\nmodule.exports = (req, res, next) => {\n  const form = new IncomingForm({\n    maxFileSize: 1 * 1024 * 1024,\n    keepExtensions: true\n  })\n\n  form.parse(req, (error, fields, file) => {\n    if (error) return next(error)\n    const patternFile = /\\.(jpg|jpeg|png|svg|gif|raw|webp)$/gi.test(file.productImage.name)\n\n    if (patternFile) {\n      const pathFile = resolve(process.cwd(), 'servers/uploads/', file.productImage.name)\n      const fileExits = existsSync(pathFile)\n      if (!fileExits) {\n        writeFileSync(pathFile)\n        req.users = JSON.parse(JSON.stringify({ fields, file }))\n        return next()\n      }\n      req.users = JSON.parse(JSON.stringify({ fields, file }))\n      return next()\n    }\n  })\n}\n", "date": "Nov 24 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "fetch api with express", "code": "const url ='https://example.com';\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  \"client_id\": \"1001125\",\n  \"client_secret\": \"876JHG76UKFJYGVHf867rFUTFGHCJ8JHV\"\n}\nconst data = {\n  \"name\": \"Wade Wilson\",\n  \"occupation\": \"Murderer\",\n  \"age\": \"30 (forever)\"\n}\n\nfetch(url, { method: 'POST', headers: headers, body: data})\n  .then((res) => {\n     return res.json()\n})\n.then((json) => {\n   // Do something with the returned data.\n  console.log(json);\n\n});", "date": "Aug 09 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Amused Ant", "source_name": "hackersandslackers.com", "source_url": "https://hackersandslackers.com/making-api-requests-with-nodejs/"},
{"title": "get post request content express", "code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.post('/', (req, res) => {\n    console.log('Got body:', req.body);\n    res.sendStatus(200);\n});\n\napp.listen(8080, () => console.log(`Started server at http://localhost:8080!`));\n", "date": "Apr 29 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Crinfarr", "source_name": "stackabuse.com", "source_url": "https://stackabuse.com/get-http-post-body-in-express-js/"},
{"title": "expressjs4 async", "code": "app.post('/signup', async(req, res, next) => {\n  async function runAsync () {\n    await firstThing()\n    await secondThing()\n  }\n\n  runAsync()\n    .catch(next)\n})\n", "date": "Sep 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Maldestor95 at your service :)", "source_name": "zellwk.com", "source_url": "https://zellwk.com/blog/async-await-express/"},
{"title": "expressjs with mongodb", "code": "app.post('/quotes', (req, res) => { console.log(req.body) })You should be able to get an object similar to the following in your command line:{name: 'pdp',quotes: 'pdp psr pdp'}", "date": "Apr 13 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Fancy Flatworm", "source_name": "medium.com", "source_url": "https://medium.com/@thepradeep001/building-a-simple-app-using-nodejs-mongodb-and-expressjs-9678277e87e0"},
{"title": "expressjs swagger yaml", "code": "// To load your swagger specification yaml file you need to use a module able to convert \n// yaml to json; for instance yamljs.\n\n>> npm install --save yamljs\n\nconst express = require('express');\nconst app = express();\nconst swaggerUi = require('swagger-ui-express');\nconst YAML = require('yamljs');\nconst swaggerDocument = YAML.load('./swagger.yaml');\n\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));", "date": "Jan 27 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ham-Solo", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/swagger-ui-express"},
{"title": "forgotten password express", "code": "extends layout\n\nblock content\n  form(method='POST')\n    legend Login\n    .form-group\n      label(for='username') Username\n      input.form-control(type='text', name='username', autofocus)\n    .form-group\n      label(for='password') Password\n      input.form-control(type='password', name='password')\n    button.btn.btn-primary(type='submit') Login\n    a.btn.btn-link(href='/forgot') Forgot Password?\n", "date": "Mar 04 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Sore Shrike", "source_name": "sahatyalkabov.com", "source_url": "http://sahatyalkabov.com/how-to-implement-password-reset-in-nodejs/"},
{"title": "expressjs req.body.parameters", "code": "app.get('/user/:id', (req, res) => {\n  console.log(req.params.id) // \"1234562134654\"\n})\nor\napp.get('/user/:user_id', (req, res) => {\n  console.log(req.params.user_id) // \"1234562134654\"\n})", "date": "Apr 19 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Mohamed Awde", "source_name": null, "source_url": null},
{"title": "express req body", "code": "app.post('/login', (req, res) => {\n  console.log(req.body.email) // \"user@example.com\"\n  console.log(req.body.password) // \"helloworld\"\n})", "date": "Apr 06 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Im_Arxus", "source_name": null, "source_url": null},
{"title": "expressjs receive url parameter", "code": "URL Parameters\nThese are information that are passed through the URL like so:\n\nhttp://example.com/api/users?id=4&token=sdfa3&geo=us", "date": "Jan 25 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ham-Solo", "source_name": "www.digitalocean.com", "source_url": "https://www.digitalocean.com/community/tutorials/use-expressjs-to-get-url-and-post-parameters"},
{"title": "expressjs path optional parameters", "code": "use the '?' character \n  \n/articles/:year?/:month?/:day?", "date": "Jan 29 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ham-Solo", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/41736413/multiple-optional-route-parameters-in-express/41748728"},
{"title": "expressjs path multiple params", "code": "app.get('/fruit/:fruitName/:fruitColor', function(req, res) {\n    var data = {\n        \"fruit\": {\n            \"apple\": req.params.fruitName,\n            \"color\": req.params.fruitColor\n        }\n    }; \n\n    send.json(data);\n});\n", "date": "Jan 29 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ham-Solo", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/15128849/using-multiple-parameters-in-url-in-express"},
{"title": "expressjs cheat sheet", "code": "app.set('x', 'yyy')\napp.get('x') //=> 'yyy'\n\napp.enable('trust proxy')\napp.disable('trust proxy')\n\napp.enabled('trust proxy') //=> true\n", "date": "Dec 07 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Combative Copperhead", "source_name": "devhints.io", "source_url": "https://devhints.io/express"},
{"title": "express js params", "code": "app.get('/path/:name', function(req, res) { // url: /path/test\n  console.log(req.params.name);  // result: test\n});\n\n// OR\n\napp.get('/path', function(req, res) {  // url: /path?name='test'\n  console.log(req.query['name']);  // result: test\n});", "date": "Jan 29 2021", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Ham-Solo", "source_name": null, "source_url": null},
{"title": "express get query params from url", "code": "GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})", "date": "Jul 03 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/17007997/how-to-access-the-get-parameters-after-in-express"},
{"title": "get query parameters in node.js", "code": "var express = require('express');\nvar app = express();\n\napp.get('/', function(req, res){\n  res.send('id: ' + req.query.id);\n});\n\napp.listen(3000);", "date": "May 14 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Fair Finch", "source_name": null, "source_url": null},
{"title": "expressjs query params", "code": "// GET /search?q=tobi+ferret\nconsole.dir(req.query.q)\n// => 'tobi ferret'\n\n// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse\nconsole.dir(req.query.order)\n// => 'desc'\n\nconsole.dir(req.query.shoe.color)\n// => 'blue'\n\nconsole.dir(req.query.shoe.type)\n// => 'converse'\n\n// GET /shoes?color[]=blue&color[]=black&color[]=red\nconsole.dir(req.query.color)\n// => ['blue', 'black', 'red']\n", "date": "May 29 2020", "vote": 6, "tags": ["javascript", "express"], "posted_by": "Lucky Lapwing", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/api.html"},
{"title": "node js http request express", "code": "npm install request@2.81.0\n", "date": "Feb 04 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Cheerful Chimpanzee", "source_name": "www.twilio.com", "source_url": "https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html"},
{"title": "expressjs create encrypted password", "code": "// To encrypt passwords use bcrypt\n\n>> npm install bcrypt\n\nconst bcrypt = require('bcrypt');\n\nbcrypt.hash('somePassowrd', 12).then(hash => {\n    console.log(hash);\n});", "date": "Jan 26 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ham-Solo", "source_name": null, "source_url": null},
{"title": "node js request async await", "code": "function doRequest(url) {\n  return new Promise(function (resolve, reject) {\n    request(url, function (error, res, body) {\n      if (!error && res.statusCode == 200) {\n        resolve(body);\n      } else {\n        reject(error);\n      }\n    });\n  });\n}\n\n// Usage:\n\nasync function main() {\n  let res = await doRequest(url);\n  console.log(res);\n}\n\nmain();", "date": "May 23 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Concerned Chipmunk", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/38428027/why-await-is-not-working-for-node-request-module/38428075"},
{"title": "expressjs async await", "code": "app.post('/signup', async(req, res) => {\n  try {\n    const { email, firstName } = req.body\n    const user = new User({ email, firstName })\n    const ret = await user.save()\n    res.json(ret)\n  } catch (error) {\n    console.log(error)\n  }\n})\n", "date": "Jan 28 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ham-Solo", "source_name": "zellwk.com", "source_url": "https://zellwk.com/blog/async-await-express/"},
{"title": "expressjs4 async", "code": "app.post('/signup', async(req, res, next) => {\n  async function runAsync () {\n    await firstThing()\n    await secondThing()\n  }\n\n  runAsync()\n    .catch(next)\n})\n", "date": "Sep 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Maldestor95 at your service :)", "source_name": "zellwk.com", "source_url": "https://zellwk.com/blog/async-await-express/"},
{"title": "express validator form data value undefined", "code": "// working\nrouter.post(\"/\", upload.upload('image').single('categoryLogo'), validate, categoryController);\n\n// not working\nrouter.post(\"/\", validate, upload.upload('image').single('categoryLogo'), categoryController);", "date": "Mar 28 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express validator check object", "code": "const express = require('express');\nconst { check } = require('express-validator');\n\nconst app = express();\napp.use(express.json());\n\napp.post(\n  '/addresses',\n  check('addresses.*.postalCode').isPostalCode(),\n  check('addresses.*.number').toInt(),\n  (req, res) => {\n    // Handle the request\n  },\n);", "date": "Mar 23 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express validator", "code": "// this method create custom express validator using middleware\n\nconst { validationResult, check } = require('express-validator')\n\nexports.resultsValidator = (req) => {\n  const messages = []\n  if (!validationResult(req).isEmpty()) {\n    const errors = validationResult(req).array()\n    for (const i of errors) {\n      messages.push(i)\n    }\n  }\n  return messages\n}\n\nexports.registerValidator = () => {\n  return [\n    check('username')\n      .notEmpty()\n      .withMessage('username is required')\n      .not()\n      .custom((val) => /[^A-za-z0-9\\s]/g.test(val))\n      .withMessage('Username not use uniq characters'),\n    check('password')\n      .notEmpty()\n      .withMessage('password is required')\n      .isLength({ min: 8 })\n      .withMessage('password must be 8 characters')\n  ]\n}\n\nexports.loginValidator = () => {\n  return [\n    check('username').notEmpty().withMessage('username or email is required'),\n    check('password').notEmpty().withMessage('password is required')\n  ]\n}\n\n// how to use express validator in controller for results message\nconst errors = resultsValidator(req)\n  if (errors.length > 0) {\n    return res.status(400).json({\n      method: req.method,\n      status: res.statusCode,\n      error: errors\n    })\n  }\n\n// how to use express validator in route\nroute.post('/login', loginValidator(), (req, res) => {\n   return res.status(200).send('Login Sucessfuly');\n});\n\nroute.post('/register', registerValidator(), (req, res) => {\n   return res.status(200).send('Register Sucessfuly');\n});", "date": "Jul 30 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express validator", "code": "npm install --save express-validator\n", "date": "May 23 2020", "vote": 6, "tags": ["javascript", "express"], "posted_by": "Yoyo Bu", "source_name": "express-validator.github.io", "source_url": "https://express-validator.github.io/docs/"},
{"title": "express-validator", "code": "// ...rest of the initial code omitted for simplicity.\nconst { body, validationResult } = require('express-validator');\n\napp.post('/user', [\n  // username must be an email\n  body('username').isEmail(),\n  // password must be at least 5 chars long\n  body('password').isLength({ min: 5 })\n], (req, res) => {\n  // Finds the validation errors in this request and wraps them in an object with handy functions\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() });\n  }\n\n  User.create({\n    username: req.body.username,\n    password: req.body.password\n  }).then(user => res.json(user));\n});\n", "date": "Jul 18 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Philan ISithembiso", "source_name": "express-validator.github.io", "source_url": "https://express-validator.github.io/docs/"},
{"title": "express validator", "code": "npm install --save express-validator\n", "date": "Mar 06 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Charming Corncrake", "source_name": "express-validator.github.io", "source_url": "https://express-validator.github.io/docs/"},
{"title": "express validator", "code": "app.post('/form', [\n  check('name').isLength({ min: 3 }),\n  check('email').isEmail(),\n  check('age').isNumeric()\n], (req, res) => {\n  const errors = validationResult(req)\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() })\n  }\n\n  const name  = req.body.name\n  const email = req.body.email\n  const age   = req.body.age\n})\n", "date": "Sep 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Mysterious Mantis", "source_name": "flaviocopes.com", "source_url": "https://flaviocopes.com/express-validate-input/"},
{"title": "express validator", "code": "import { Request } from 'express'\nimport { check, validationResult, ValidationError, ValidationChain, Result, Meta } from 'express-validator'\n\nexport const expressValidator = (req: Request): ValidationError[] => {\n\tconst errors: Result<ValidationError> = validationResult(req)\n\n\tconst messages: ValidationError[] = []\n\tif (!errors.isEmpty()) {\n\t\tfor (const i of errors.array()) {\n\t\t\tmessages.push(i)\n\t\t}\n\t}\n\treturn messages\n}\n\nexport const registerValidator = (): ValidationChain[] => [\n\tcheck('firstName').notEmpty().withMessage('firstName is required'),\n\tcheck('firstName')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('firstName cannot include unique character'),\n\tcheck('lastName').notEmpty().withMessage('lastName is required'),\n\tcheck('lastName')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('lastName cannot include unique character'),\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid'),\n\tcheck('password').notEmpty().withMessage('password is required'),\n\tcheck('password').isLength({ min: 8 }).withMessage('password must be at least 8 characters'),\n\tcheck('location').notEmpty().withMessage('location is required'),\n\tcheck('location')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('location cannot include unique character'),\n\tcheck('phone').notEmpty().withMessage('phone is required'),\n\tcheck('phone').isLength({ min: 10 }).withMessage('phone number must be at least 10 characters'),\n\tcheck('phone').isLength({ max: 12 }).withMessage('phone number must be at least 12 characters'),\n\tcheck('phone').isMobilePhone('id-ID').withMessage('phone number is not valid')\n]\n\nexport const loginValidator = (): ValidationChain[] => [\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid'),\n\tcheck('password').notEmpty().withMessage('pasword is required')\n]\n\nexport const emailValidator = (): ValidationChain[] => [\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid')\n]\n\nexport const tokenValidator = (): ValidationChain[] => [\n\tcheck('token').notEmpty().withMessage('token is required'),\n\tcheck('token').isBase64().withMessage('token is not valid')\n]\n\nexport const passwordValidator = (): ValidationChain[] => [\n\tcheck('password').notEmpty().withMessage('password is required'),\n\tcheck('password').isLength({ min: 8 }).withMessage('password must be at least 8 characters'),\n\tcheck('password')\n\t\t.not()\n\t\t.custom((value: string, { req }: Meta) => req.body.cpassword !== value)\n\t\t.withMessage('confirm password is not match with password'),\n\tcheck('cpassword').notEmpty().withMessage('cpassword is required'),\n\tcheck('cpassword').isLength({ min: 8 }).withMessage('cpassword must be at least 8 characters')\n]", "date": "Jan 06 2021", "vote": 0, "tags": ["javascript", "express", "typescript"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express view engine', 'ejs", "code": "app.set(\"view engine\", \"ejs\");\napp.set(\"views\", path.join(__dirname, \"views\"));", "date": "Jan 22 2021", "vote": 15, "tags": ["javascript", "express"], "posted_by": "Mehedi Islam Ripon", "source_name": null, "source_url": null},
{"title": "express-validator", "code": "// ...rest of the initial code omitted for simplicity.\nconst { body, validationResult } = require('express-validator');\n\napp.post('/user', [\n  // username must be an email\n  body('username').isEmail(),\n  // password must be at least 5 chars long\n  body('password').isLength({ min: 5 })\n], (req, res) => {\n  // Finds the validation errors in this request and wraps them in an object with handy functions\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() });\n  }\n\n  User.create({\n    username: req.body.username,\n    password: req.body.password\n  }).then(user => res.json(user));\n});\n", "date": "Jul 18 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Philan ISithembiso", "source_name": "express-validator.github.io", "source_url": "https://express-validator.github.io/docs/"},
{"title": "express validator always return error", "code": "app.use(express.json())", "date": "May 30 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Clever Crane", "source_name": null, "source_url": null},
{"title": "express unique validator for the owner", "code": "schmea.post('save', function(error, doc, next) {\n  if (error.name === 'MongoError' && error.code === 11000) {\n    next(new Error('email must be unique'));\n  } else {\n    next(error);\n  }\n});\n", "date": "Nov 20 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Disgusted Dragonfly", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/41477799/mongoose-unique-validator-does-not-behave-like-other-validators"},
{"title": "app.use public", "code": "app.use(express.static('public'))\napp.use(express.static('files'))\n", "date": "Apr 02 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "express validator check vs body", "code": "Same as check([fields, message]), but only checking req.body.", "date": "Mar 02 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Elated Eagle", "source_name": "express-validator.github.io", "source_url": "https://express-validator.github.io/docs/check-api.html"},
{"title": "express static", "code": "\napp.use(express.static('public'));\n\n", "date": "Dec 08 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Difficult Dolphin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/it/starter/static-files.html"},
{"title": "express static serve", "code": "app.use(express.static('public'))\n", "date": "Jan 22 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Donate ", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "express validator example", "code": "// this method create custom express validator using middleware\n\nconst { validationResult, check } = require('express-validator')\n\nexports.resultsValidator = (req) => {\n  const messages = []\n  if (!validationResult(req).isEmpty()) {\n    const errors = validationResult(req).array()\n    for (const i of errors) {\n      messages.push(i)\n    }\n  }\n  return messages\n}\n\nexports.registerValidator = () => {\n  return [\n    check('username')\n      .notEmpty()\n      .withMessage('username is required')\n      .not()\n      .custom((val) => /[^A-za-z0-9\\s]/g.test(val))\n      .withMessage('Username not use uniq characters'),\n    check('password')\n      .notEmpty()\n      .withMessage('password is required')\n      .isLength({ min: 8 })\n      .withMessage('password must be 8 characters')\n  ]\n}\n\nexports.loginValidator = () => {\n  return [\n    check('username').notEmpty().withMessage('username or email is required'),\n    check('password').notEmpty().withMessage('password is required')\n  ]\n}\n\n// how to use express validator in controller for results message\nconst errors = resultsValidator(req)\n  if (errors.length > 0) {\n    return res.status(400).json({\n      method: req.method,\n      status: res.statusCode,\n      error: errors\n    })\n  }\n\n// how to use express validator in route\nroute.post('/login', loginValidator(), (req, res) => {\n   return res.status(200).send('Login Sucessfuly');\n});\n\nroute.post('/register', registerValidator(), (req, res) => {\n   return res.status(200).send('Register Sucessfuly');\n});", "date": "Sep 08 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express serve html", "code": "const path = require('path')\nconst express = require('express')\n\nconst app = express()\n\nconst port = process.env.PORT || 3000\nconst publicDirectoryPath = path.join(__dirname, '../public')\n\napp.use(express.static(publicDirectoryPath))\n\napp.listen(port, () => {\n    console.log(`Server is up on port ${port}!`)\n})", "date": "Jul 31 2020", "vote": 0, "tags": ["javascript", "express", "html"], "posted_by": "Thor", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/44651402/serve-html-with-express"},
{"title": "express public", "code": "app.use(express.static(__dirname + '/public'));", "date": "Jul 22 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Doubtful Dog", "source_name": null, "source_url": null},
{"title": "app.use public", "code": "app.use(express.static('public'))\napp.use(express.static('files'))\n", "date": "Apr 02 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "use static with expres", "code": "app.use(express.static('directoryName'))\n#store the files in the directory as if you were making a website without express", "date": "Aug 12 2020", "vote": 2, "tags": ["javascript", "express", "whatever"], "posted_by": "Encouraging Elk", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "express static", "code": "app.use(express.static('public'))\n", "date": "Dec 12 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Faithful Fowl", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "express validator", "code": "npm install --save express-validator\n", "date": "May 23 2020", "vote": 6, "tags": ["javascript", "express"], "posted_by": "Yoyo Bu", "source_name": "express-validator.github.io", "source_url": "https://express-validator.github.io/docs/"},
{"title": "express-validator", "code": "// ...rest of the initial code omitted for simplicity.\nconst { body, validationResult } = require('express-validator');\n\napp.post('/user', [\n  // username must be an email\n  body('username').isEmail(),\n  // password must be at least 5 chars long\n  body('password').isLength({ min: 5 })\n], (req, res) => {\n  // Finds the validation errors in this request and wraps them in an object with handy functions\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() });\n  }\n\n  User.create({\n    username: req.body.username,\n    password: req.body.password\n  }).then(user => res.json(user));\n});\n", "date": "Jul 18 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Philan ISithembiso", "source_name": "express-validator.github.io", "source_url": "https://express-validator.github.io/docs/"},
{"title": "express validator", "code": "app.post('/form', [\n  check('name').isLength({ min: 3 }),\n  check('email').isEmail(),\n  check('age').isNumeric()\n], (req, res) => {\n  const errors = validationResult(req)\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() })\n  }\n\n  const name  = req.body.name\n  const email = req.body.email\n  const age   = req.body.age\n})\n", "date": "Sep 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Mysterious Mantis", "source_name": "flaviocopes.com", "source_url": "https://flaviocopes.com/express-validate-input/"},
{"title": "express validator", "code": "import { Request } from 'express'\nimport { check, validationResult, ValidationError, ValidationChain, Result, Meta } from 'express-validator'\n\nexport const expressValidator = (req: Request): ValidationError[] => {\n\tconst errors: Result<ValidationError> = validationResult(req)\n\n\tconst messages: ValidationError[] = []\n\tif (!errors.isEmpty()) {\n\t\tfor (const i of errors.array()) {\n\t\t\tmessages.push(i)\n\t\t}\n\t}\n\treturn messages\n}\n\nexport const registerValidator = (): ValidationChain[] => [\n\tcheck('firstName').notEmpty().withMessage('firstName is required'),\n\tcheck('firstName')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('firstName cannot include unique character'),\n\tcheck('lastName').notEmpty().withMessage('lastName is required'),\n\tcheck('lastName')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('lastName cannot include unique character'),\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid'),\n\tcheck('password').notEmpty().withMessage('password is required'),\n\tcheck('password').isLength({ min: 8 }).withMessage('password must be at least 8 characters'),\n\tcheck('location').notEmpty().withMessage('location is required'),\n\tcheck('location')\n\t\t.not()\n\t\t.custom((val: string) => /[^a-zA-Z]/gi.test(val))\n\t\t.withMessage('location cannot include unique character'),\n\tcheck('phone').notEmpty().withMessage('phone is required'),\n\tcheck('phone').isLength({ min: 10 }).withMessage('phone number must be at least 10 characters'),\n\tcheck('phone').isLength({ max: 12 }).withMessage('phone number must be at least 12 characters'),\n\tcheck('phone').isMobilePhone('id-ID').withMessage('phone number is not valid')\n]\n\nexport const loginValidator = (): ValidationChain[] => [\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid'),\n\tcheck('password').notEmpty().withMessage('pasword is required')\n]\n\nexport const emailValidator = (): ValidationChain[] => [\n\tcheck('email').notEmpty().withMessage('email is required'),\n\tcheck('email').isEmail().withMessage('email is not valid')\n]\n\nexport const tokenValidator = (): ValidationChain[] => [\n\tcheck('token').notEmpty().withMessage('token is required'),\n\tcheck('token').isBase64().withMessage('token is not valid')\n]\n\nexport const passwordValidator = (): ValidationChain[] => [\n\tcheck('password').notEmpty().withMessage('password is required'),\n\tcheck('password').isLength({ min: 8 }).withMessage('password must be at least 8 characters'),\n\tcheck('password')\n\t\t.not()\n\t\t.custom((value: string, { req }: Meta) => req.body.cpassword !== value)\n\t\t.withMessage('confirm password is not match with password'),\n\tcheck('cpassword').notEmpty().withMessage('cpassword is required'),\n\tcheck('cpassword').isLength({ min: 8 }).withMessage('cpassword must be at least 8 characters')\n]", "date": "Jan 06 2021", "vote": 0, "tags": ["javascript", "express", "typescript"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express url redirect", "code": "const app = require('express')();\n\n// The `res.redirect()` function sends back an HTTP 302 by default.\n// When an HTTP client receives a response with status 302, it will send\n// an HTTP request to the URL in the response, in this case `/to`\napp.get('/from', (req, res) => {\n  res.redirect('/to');\n});\napp.get('/to', (req, res) => res.send('Hello, World!'));\n", "date": "Jun 12 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "Salo Hopeless", "source_name": "masteringjs.io", "source_url": "https://masteringjs.io/tutorials/express/redirect"},
{"title": "express ssl", "code": "// create certificate g-ssl.config.js\n\nvar { writeFileSync } = require('fs');\nvar { resolve } = require('path')\nvar selfsigned = require('selfsigned');\nvar chalk = require('chalk');\n\nvar gssl = selfsigned.generate([{ name: 'commonName', value: 'localhost' }], {\n\tkeySize: 2048,\n\talgorithm: 'sha256',\n\tdays: 90,\n\tclientCertificateCN: 'localhost'\n});\n\nwriteFileSync(resolve(process.cwd(), 'ssl/key.pem'), `${gssl.private}`, 'utf8');\nwriteFileSync(resolve(process.cwd(), 'ssl/cert.pem'), `${gssl.cert}`, 'utf8');\n\nconsole.log(chalk.green.bold('Generate Certificate SSL Succeffuly'));\n\n// app.js\n\nrequire('dotenv').config();\nconst https = require(\"https\");\nconst http = require('http');\nconst express = require('express');\nconst { resolve } = require('path')\nconst { readFileSync } = require(\"fs\");\nconst logger = require('morgan');\nconst chalk = require('chalk');\nconst app = express();\n\napp.use(logger('dev'));\napp.set('views', 'views');\napp.set('view engine', 'ejs');\napp.set('x-powered-by', false);\n\napp.get('/', (req, res) => {\n\t res.render('index', {\n\t \t desc: req.protocol === 'https'\n\t \t ? `Express using SSL certificate for using ${req.protocol} protocol`\n\t \t : `Express using SSL certificate for using ${req.protocol} protocol`\n\t })\n});\n\nhttp.createServer(app).listen(process.env.PORT, () => console.log(chalk.white.bold('http server on port 3000')));\n\nif(process.env.NODE_ENV === 'development') {\n\tconst options = {\n\t  key: readFileSync(`${resolve(process.cwd(), 'ssl/key.pem')}`),\n\t  cert: readFileSync(`${resolve(process.cwd(), 'ssl/cert.pem')}`),\n\t};\n\thttps.createServer(options, app).listen(3001, () => console.log(chalk.white.bold('https server on port 3001')));\n}\n\nconsole.log(chalk.white.bold(`NOTE: important this SSL for Development Mode not for Production Mode`));\nconsole.log(chalk.white.bold(`NOTE: because this ssl certificate's signature was created manually`));\nconsole.log(chalk.white.bold(`NOTE: SSL certificate is used to use authentication using Oauth or package like Passport for auth third part \\n`));", "date": "Jul 22 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express send raw html", "code": "res.set('Content-Type', 'text/html');\nres.send(new Buffer('<h2>Test String</h2>'));", "date": "Oct 14 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "florinrelea", "source_name": null, "source_url": null},
{"title": "express send pdf to view", "code": "res.setHeader('Content-Type', 'application/pdf')\nres.setHeader('Content-Disposition', 'inline;filename=yolo.pdf')", "date": "Nov 24 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "florinrelea", "source_name": null, "source_url": null},
{"title": "express cookies", "code": "const express = require('express');\nconst cookieParser = require('cookie-parser');\n\nconst app = express();\napp.use(cookieParser());\n\napp.get('/', (req, res) => {\n  res.send(req.cookies);\n});\n\napp.listen(3000);", "date": "Sep 19 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express signed cookies", "code": "var express = require('express');\nvar cookieParser = require('cookie-parser');\n\nvar app = express();\napp.use(cookieParser('YOUR-SECRET-SALT'));\n\napp.get('/', (req, res, next) => {\n  res.cookie('name', 'value', { signed: true });\n  res.send('Success');\n});\n\napp.get('/test', (req, res, next) => {\n  req.signedCookies.name; // 'value'\n});", "date": "Oct 26 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express set response code", "code": "res.status(400);\nres.send('None shall pass');", "date": "May 21 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "Elated Eagle", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/10563644/how-to-specify-http-error-code"},
{"title": "express send 200", "code": "res.status(200).send('some text');", "date": "Mar 05 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "lukfd", "source_name": null, "source_url": null},
{"title": "express server replit", "code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(express.static('public'));\n\napp.get('/', (req, res) => {\n\tres.send('Hello Express app');\n});\n\napp.listen(3000, () => console.log('server started'));", "date": "Jul 02 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Crowded Chamois", "source_name": null, "source_url": null},
{"title": "express static", "code": "\napp.use(express.static('public'));\n\n", "date": "Dec 08 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Difficult Dolphin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/it/starter/static-files.html"},
{"title": "express public", "code": "app.use(express.static(__dirname + '/public'));", "date": "Jul 22 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Doubtful Dog", "source_name": null, "source_url": null},
{"title": "express img folder", "code": "app.use(express.static('public'))\n", "date": "Mar 22 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "app.use public", "code": "app.use(express.static('public'))\napp.use(express.static('files'))\n", "date": "Apr 02 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "express serve static", "code": "\napp.use('/static', express.static(__dirname + '/public'));\n\n", "date": "Apr 26 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "feddynventor", "source_name": "expressjs.com", "source_url": "https://expressjs.com/it/starter/static-files.html"},
{"title": "node js express static folder", "code": "// node js -> express -> basic example: static folder, 404 page\n\nconst express = require('express');\nconst path = require('path');\nconst PORT = process.env.PORT || 5000;\n\nconst app = express();\n\nfunction error404(req, res) {\n  res.status(404);\n\n  if (req.accepts('html')) {\n    res.sendFile(path.join(__dirname, 'public/errors/404.html'));\n    return;\n  }\n\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  \n  res.type('txt').send('404 - Not found');\n}\n\napp\n  .use(express.static(path.join(__dirname, 'public')))\n  .use(error404)\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`));\n", "date": "Jul 06 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express send image bufffer", "code": "res.contentType('image/jpeg');\nres.send(data);", "date": "May 12 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "florinrelea", "source_name": null, "source_url": null},
{"title": "req.body is undefined", "code": "var bodyParser = require('body-parser')\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())", "date": "Feb 21 2020", "vote": 10, "tags": ["javascript", "express"], "posted_by": "Enthusiastic Earthworm", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/9177049/express-js-req-body-undefined"},
{"title": "express request body undefined", "code": "npm install body-parser\n// then in your app\nvar express = require('express')\nvar bodyParser = require('body-parser')\n \nvar app = express()\n \n// create application/json parser\nvar jsonParser = bodyParser.json()\n \n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n \n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  res.send('welcome, ' + req.body.username)\n})\n \n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  // create user in req.body\n})\n", "date": "Jan 13 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Almabek", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/9177049/express-js-req-body-undefined"},
{"title": "express post request body undefined", "code": "/* USE:\n\nnpm i body-parser\n*/\n\n// then in your app\nvar express = require('express')\nvar bodyParser = require('body-parser')\n \nvar app = express()\n \n// create application/json parser\nvar jsonParser = bodyParser.json()\n \n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n \n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  res.send('welcome, ' + req.body.username)\n})\n \n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  // create user in req.body\n})", "date": "Jan 11 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "lukfd", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/9177049/express-js-req-body-undefined"},
{"title": "express hello world", "code": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express", "date": "Jul 17 2020", "vote": 35, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express router file", "code": "var express = require('express');\nvar router = express.Router();\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now());\n  next();\n});\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page');\n});\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds');\n});\n\nmodule.exports = router;", "date": "May 03 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Lively Loris", "source_name": null, "source_url": null},
{"title": "app.get", "code": "const express = require('express');\nconst app = express();\n\nconst { getElementById, getIndexById, updateElement,\n  seedElements, createElement } = require('./utils');\n\nconst PORT = process.env.PORT || 4001;\n// Use static server to serve the Express Yourself Website\napp.use(express.static('public'));\n\nconst expressions = [];\nseedElements(expressions, 'expressions');\nconst animals = [];\nseedElements(animals, 'animals');\n\n// Get all expressions\napp.get('/expressions', (req, res, next) => {\n  res.send(expressions);\n});\n\n// Get a single expression\napp.get('/expressions/:id', (req, res, next) => {\n  const foundExpression = getElementById(req.params.id, expressions);\n  if (foundExpression) {\n    res.send(foundExpression);\n  } else {\n    res.status(404).send();\n  }\n});\n\n// Update an expression\napp.put('/expressions/:id', (req, res, next) => {\n  const expressionIndex = getIndexById(req.params.id, expressions);\n  if (expressionIndex !== -1) {\n    updateElement(req.params.id, req.query, expressions);\n    res.send(expressions[expressionIndex]);\n  } else {\n    res.status(404).send();\n  }\n});\n\n// Create an expression\napp.post('/expressions', (req, res, next) => {\n  const receivedExpression = createElement('expressions', req.query);\n  if (receivedExpression) {\n    expressions.push(receivedExpression);\n    res.status(201).send(receivedExpression);\n  } else {\n    res.status(400).send();\n  }\n});\n\n// Delete an expression\napp.delete('/expressions/:id', (req, res, next) => {\n  const expressionIndex = getIndexById(req.params.id, expressions);\n  if (expressionIndex !== -1) {\n    expressions.splice(expressionIndex, 1);\n    res.status(204).send();\n  } else {\n    res.status(404).send();\n  }\n});\n\n// Get all animals\napp.get('/animals', (req, res, next) => {\n  res.send(animals);\n});\n\n// Get a single animal\napp.get('/animals/:id', (req, res, next) => {\n  const animal = getElementById(req.params.id, animals);\n  if (animal) {\n    res.send(animal);\n  } else {\n    res.status(404).send();\n  }\n});\n\n// Create an animal\napp.post('/animals', (req, res, next) => {\n  const receivedAnimal = createElement('animals', req.query);\n  if (receivedAnimal) {\n    animals.push(receivedAnimal);\n    res.status(201).send(receivedAnimal);\n  } else {\n    res.status(400).send();\n  }\n});\n\n// Update an animal\napp.put('/animals/:id', (req, res, next) => {\n  const animalIndex = getIndexById(req.params.id, animals);\n  if (animalIndex !== -1) {\n    updateElement(req.params.id, req.query, animals);\n    res.send(animals[animalIndex]);\n  } else {\n    res.status(404).send();\n  }\n});\n\n// Delete a single animal\napp.delete('/animals/:id', (req, res, next) => {\n  const animalIndex = getIndexById(req.params.id, animals);\n  if (animalIndex !== -1) {\n    animals.splice(animalIndex, 1);\n    res.status(204).send();\n  } else {\n    res.status(404).send();\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is listening on ${PORT}`);\n});", "date": "Sep 07 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Jealous Jellyfish", "source_name": null, "source_url": null},
{"title": "what is app.use() used for", "code": "//app.get will see only exact match ex.> \"/book\" here app.get will not allow /book/1, etc \n//but app.use is different see below\n\n//what is difference between app.use and app.all\n//app.use takes only 1 callback while app.all takes multiple callbacks\n//app.use will only see whether url starts with specified path But, app.all() will match the complete path\n\napp.use( \"/book\" , middleware);\n// will match /book\n// will match /book/author\n// will match /book/subject\n\napp.all( \"/book\" , handler);\n// will match /book\n// won't match /book/author   \n// won't match /book/subject    \n\napp.all( \"/book/*\" , handler);\n// won't match /book        \n// will match /book/author\n// will match /book/subject", "date": "Jun 16 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Viraj", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/15601703/difference-between-app-use-and-app-get-in-express-js"},
{"title": "express router middleware", "code": "var express = require('express')\nvar app = express()\nvar router = express.Router()\n\n// a middleware function with no mount path. This code is executed for every request to the router\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now())\n  next()\n})\n\n// a middleware sub-stack shows request info for any type of HTTP request to the /user/:id path\nrouter.use('/user/:id', function (req, res, next) {\n  console.log('Request URL:', req.originalUrl)\n  next()\n}, function (req, res, next) {\n  console.log('Request Type:', req.method)\n  next()\n})\n\n// a middleware sub-stack that handles GET requests to the /user/:id path\nrouter.get('/user/:id', function (req, res, next) {\n  // if the user ID is 0, skip to the next router\n  if (req.params.id === '0') next('route')\n  // otherwise pass control to the next middleware function in this stack\n  else next()\n}, function (req, res, next) {\n  // render a regular page\n  res.render('regular')\n})\n\n// handler for the /user/:id path, which renders a special page\nrouter.get('/user/:id', function (req, res, next) {\n  console.log(req.params.id)\n  res.render('special')\n})\n\n// mount the router on the app\napp.use('/', router)\n", "date": "Jan 10 2021", "vote": -2, "tags": ["javascript", "express"], "posted_by": "Evil Eagle", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/using-middleware.html"},
{"title": "express request path", "code": "// GET 'http://www.example.com/admin/new?a=b'\napp.get('/admin', (req, res, next) => {\n  req.originalUrl; // '/admin/new?a=b' (full path with query string)\n  req.baseUrl; // '/admin'\n  req.path; // '/new'\n  req.baseUrl + req.path; // '/admin/new' (full path without query string)\n});", "date": "Aug 12 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express redirect", "code": "res.redirect('/foo/bar')\nres.redirect('http://example.com')\nres.redirect(301, 'http://example.com')\nres.redirect('../login')\n", "date": "Dec 13 2019", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": null, "source_url": null},
{"title": "node js http request express", "code": "npm install request@2.81.0\n", "date": "Feb 04 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Cheerful Chimpanzee", "source_name": "www.twilio.com", "source_url": "https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html"},
{"title": "express render", "code": "// send the rendered view to the client\nres.render('index')\n\n// if a callback is specified, the rendered HTML string has to be sent explicitly\nres.render('index', function (err, html) {\n  res.send(html)\n})\n\n// pass a local variable to the view\nres.render('user', { name: 'Tobi' }, function (err, html) {\n  // ...\n})\n", "date": "Dec 13 2019", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": null, "source_url": null},
{"title": "expressjs req.body.parameters", "code": "app.get('/user/:id', (req, res) => {\n  console.log(req.params.id) // \"1234562134654\"\n})\nor\napp.get('/user/:user_id', (req, res) => {\n  console.log(req.params.user_id) // \"1234562134654\"\n})", "date": "Apr 19 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Mohamed Awde", "source_name": null, "source_url": null},
{"title": "express req body", "code": "app.post('/login', (req, res) => {\n  console.log(req.body.email) // \"user@example.com\"\n  console.log(req.body.password) // \"helloworld\"\n})", "date": "Apr 06 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Im_Arxus", "source_name": null, "source_url": null},
{"title": "express request url ignores hash", "code": "The part of the URL starting with the # symbol is never sent to the server.\n\nThe # symbol in an URL is to introduce the fragment identifier. \nThis is used to link to a specific part of the page. If a browser loads \n/#some/url, it will effectively load /, and skip to the HTML element \nwith id=\"some/url\" (if present). The fragment identifier is only relevant \nto the browser, so it is not sent with the HTTP request.\n\nWhat you however can do, is using client side Javascript to read out the \nvalue of window.location.hash and send it to the server using \nan XMLHttpRequest.", "date": "Feb 24 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ham-Solo", "source_name": null, "source_url": null},
{"title": "node js http request express", "code": "npm install request@2.81.0\n", "date": "Feb 04 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Cheerful Chimpanzee", "source_name": "www.twilio.com", "source_url": "https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html"},
{"title": "express render", "code": "// send the rendered view to the client\nres.render('index')\n\n// if a callback is specified, the rendered HTML string has to be sent explicitly\nres.render('index', function (err, html) {\n  res.send(html)\n})\n\n// pass a local variable to the view\nres.render('user', { name: 'Tobi' }, function (err, html) {\n  // ...\n})\n", "date": "Dec 13 2019", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": null, "source_url": null},
{"title": "response.render", "code": "// here you set that all templates are located in `/views` directory\napp.set('views', __dirname + '/views');\n\n// here you set that you're using `ejs` template engine, and the\n// default extension is `ejs`\napp.set('view engine', 'ejs');\n\n// here you render `orders` template\nresponse.render(\"orders\", {orders: orders_json});\n", "date": "Sep 28 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Crazy Crossbill", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/21843840/what-does-res-render-do-and-what-does-the-html-file-look-like"},
{"title": "express redirect with post data", "code": "app.post('/', function(req, res) {\n  res.redirect(307, '/test');\n});", "date": "Mar 25 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Krushn", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/a/38810253/8034466"},
{"title": "express req ip address", "code": "const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n", "date": "Apr 30 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Obedient Oyster", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/10849687/express-js-how-to-get-remote-client-address"},
{"title": "express req get json", "code": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.post('*', (req, res) => {\n  req.body;\t// The json object sent to the server\n});\nconst port = 3000;\napp.listen(port, () => console.log(`Listening on port ${port}.`));\n", "date": "Aug 26 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express route parameters", "code": "app.get('/users/:userId/books/:bookId', function (req, res) {\n  res.send(req.params)\n})\n", "date": "Oct 29 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Frail Fowl", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "express route parameters", "code": "Route path: /users/:userId/books/:bookId\nRequest URL: http://localhost:3000/users/34/books/8989\nreq.params: { \"userId\": \"34\", \"bookId\": \"8989\" }\n", "date": "Jul 05 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Motionless Mouse", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "express route parameters", "code": "app.get('/users/:userId/books/:bookId', function (req, res) {\n  res.send(req.params)\n})\n", "date": "Jul 05 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Motionless Mouse", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "express route parameters", "code": "app.get('/',function(req,res)\n{\n    res.send(\"Route path at base address\");\n});", "date": "Sep 20 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Wrong Wasp", "source_name": "modernweb.com", "source_url": "https://modernweb.com/the-basics-of-express-routes/"},
{"title": "express route parameters", "code": "var express = require('express');\nvar http = require('http');\nvar app = express();", "date": "Sep 20 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Wrong Wasp", "source_name": "modernweb.com", "source_url": "https://modernweb.com/the-basics-of-express-routes/"},
{"title": "express route parameters", "code": "Route path: /flights/:from-:to\nRequest URL: http://localhost:3000/flights/LAX-SFO\nreq.params: { \"from\": \"LAX\", \"to\": \"SFO\" }\n", "date": "Jul 05 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Motionless Mouse", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "javascript redirect", "code": "window.location.href = \"http://mywebsite.com/home.html\";", "date": "Jul 18 2019", "vote": 45, "tags": ["javascript", "express"], "posted_by": "Grepper", "source_name": null, "source_url": null},
{"title": "express redirect to url", "code": "app.get('/', (req, res) => {\n  res.redirect('/about');\n})", "date": "Oct 27 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Busy Bison", "source_name": null, "source_url": null},
{"title": "express redirect", "code": "app.get('/', (req, res) => {\n  res.redirect('/foo/bar');\n});", "date": "Jul 18 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express redirect", "code": "res.redirect('/foo/bar')\nres.redirect('http://example.com')\nres.redirect(301, 'http://example.com')\nres.redirect('../login')\n", "date": "Dec 13 2019", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": null, "source_url": null},
{"title": "express url redirect", "code": "const app = require('express')();\n\n// The `res.redirect()` function sends back an HTTP 302 by default.\n// When an HTTP client receives a response with status 302, it will send\n// an HTTP request to the URL in the response, in this case `/to`\napp.get('/from', (req, res) => {\n  res.redirect('/to');\n});\napp.get('/to', (req, res) => res.send('Hello, World!'));\n", "date": "Jun 12 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "Salo Hopeless", "source_name": "masteringjs.io", "source_url": "https://masteringjs.io/tutorials/express/redirect"},
{"title": "express js redirect to url", "code": "app.all('/secret', function (req, res, next) {\n  console.log('Accessing the secret section ...')\n  next() // pass control to the next handler\n})\n", "date": "Jul 22 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Upset Unicorn", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "javascript redirect", "code": "window.location.href = \"http://mywebsite.com/home.html\";", "date": "Jul 18 2019", "vote": 45, "tags": ["javascript", "express"], "posted_by": "Grepper", "source_name": null, "source_url": null},
{"title": "express redirect to url", "code": "app.get('/', (req, res) => {\n  res.redirect('/about');\n})", "date": "Oct 27 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Busy Bison", "source_name": null, "source_url": null},
{"title": "express redirect", "code": "app.get('/', (req, res) => {\n  res.redirect('/foo/bar');\n});", "date": "Jul 18 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express redirect", "code": "res.redirect('https://google.com')", "date": "Mar 17 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "florinrelea", "source_name": null, "source_url": null},
{"title": "express redirect", "code": "res.redirect('/foo/bar')\nres.redirect('http://example.com')\nres.redirect(301, 'http://example.com')\nres.redirect('../login')\n", "date": "Dec 13 2019", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": null, "source_url": null},
{"title": "express url redirect", "code": "const app = require('express')();\n\n// The `res.redirect()` function sends back an HTTP 302 by default.\n// When an HTTP client receives a response with status 302, it will send\n// an HTTP request to the URL in the response, in this case `/to`\napp.get('/from', (req, res) => {\n  res.redirect('/to');\n});\napp.get('/to', (req, res) => res.send('Hello, World!'));\n", "date": "Jun 12 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "Salo Hopeless", "source_name": "masteringjs.io", "source_url": "https://masteringjs.io/tutorials/express/redirect"},
{"title": "How to parse POST requests with express nodejs", "code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-test', (req, res) => {\n    console.log('Got body:', req.body);\n    res.sendStatus(200);\n});\n\napp.listen(8080, () => console.log(`Started server at http://localhost:8080!`));", "date": "May 17 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "m1ke510a", "source_name": null, "source_url": null},
{"title": "express receive post data", "code": "const { id } = req.body;", "date": "Nov 12 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "TindyC", "source_name": null, "source_url": null},
{"title": "How to access the request body when POSTing using Node.js and Express", "code": "const express = require('express');\n\nconst app = express();\n\napp.use(express.json({extended: false})); //This is the line that you want to add\n\napp.post('/postroute', (req, res) => {\n    console.log('body :', req.body);\n    res.sendStatus(200);\n});", "date": "Jul 18 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express rate limit redis", "code": "import { Request, Response, NextFunction } from 'express'\nimport IORedis from 'ioredis'\nimport ip from 'request-ip'\n\nlet io = new IORedis({\n\thost: process.env.REDIS_HOST || 'localhost',\n\tport: parseInt(process.env.REDIS_PORT || '')\n})\n\nexport async function rateLimiterById(req: Request, res: Response, next: NextFunction): Promise<any> {\n\t// store id to redis\n\tawait io.set(`redis-id:${req.payload.uid}`, req.payload.uid)\n\t// get request by id\n\tconst getId = await io.get(`redis-id:${req.payload.uid}`)\n\t// counter count request\n\tconst maxCounterRequest = await io.incrby(`counter-id:${req.payload.uid}`, 1)\n\n\tif (getId === req.payload.uid && maxCounterRequest <= 50) {\n\t\tawait io.expire(`counter-id:${req.payload.uid}`, 10)\n\t} else {\n\t\tawait io.del(`redis-id:${req.payload.uid}`)\n\t\treturn res.status(429).json({\n\t\t\tstatus: 'ERROR TO MANY REQUEST',\n\t\t\tcode: 'AX2AC5R',\n\t\t\tmessage: 'cannot access this endpoint, after 10 second is over'\n\t\t})\n\t}\n\n\tnext()\n}\n\nexport async function rateLimiterByIp(req: Response, res: Response, next: NextFunction): Promise<any> {\n\tconst getIp = ip.getClientIp(req)\n\t// store id to redis\n\tawait io.set(`redis-ip:${getIp}`, `${getIp}`)\n\t// get request by id\n\tconst getStoreIp = await io.get(`redis-ip:${getIp}`)\n\t// counter count request\n\tconst maxCounterRequest = await io.incrby(`counter-ip:${getIp}`, 1)\n\n\tif (getStoreIp === getIp && maxCounterRequest <= 50) {\n\t\tawait io.expire(`counter-ip:${getIp}`, 10)\n\t} else {\n\t\tawait io.del(`redis-ip:${getIp}`)\n\t\treturn res.status(429).json({\n\t\t\tstatus: 'ERROR TO MANY REQUEST',\n\t\t\tcode: 'AX2AC5R',\n\t\t\tmessage: 'cannot access this endpoint, after 10 second is over'\n\t\t})\n\t}\n\n\tnext()\n}", "date": "Apr 20 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express react application", "code": "npm\u00a0install\u00a0create-app-react-express\u00a0-g", "date": "Jan 12 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Wide-eyed Walrus", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/create-app-react-express"},
{"title": "how to play around with backend node js and frontend react", "code": "//add this at the end of your players.js :\nmodule.exports = router\n//To make this url work without problem\nhttp://localhost:3001/players/list", "date": "Dec 23 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "Xanthous Xenomorph", "source_name": "www.techomoro.com", "source_url": "https://www.techomoro.com/how-to-create-a-react-frontend-express-backend-and-connect-them-together/"},
{"title": "how to play around with backend node js and frontend react", "code": " http://localhost:3001/players/list/3", "date": "Dec 23 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "Xanthous Xenomorph", "source_name": "www.techomoro.com", "source_url": "https://www.techomoro.com/how-to-create-a-react-frontend-express-backend-and-connect-them-together/"},
{"title": "express react docker container example", "code": "# Use a lighter version of Node as a parent imageFROM mhart/alpine-node:8.11.4# Set the working directory to /clientWORKDIR /client# copy package.json into the container at /clientCOPY package*.json /client/# install dependenciesRUN npm install# Copy the current directory contents into the container at /clientCOPY . /client/# Make port 3000 available to the world outside this containerEXPOSE 3000# Run the app when the container launchesCMD [\"npm\", \"start\"]", "date": "Apr 19 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Lonely Lizard", "source_name": "medium.com", "source_url": "https://medium.com/free-code-camp/create-a-fullstack-react-express-mongodb-app-using-docker-c3e3e21c4074"},
{"title": "express public", "code": "app.use(express.static(__dirname + '/public'));", "date": "Jul 22 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Doubtful Dog", "source_name": null, "source_url": null},
{"title": "express img folder", "code": "app.use(express.static('public'))\n", "date": "Mar 22 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "app.use public", "code": "app.use(express.static('public'))\napp.use(express.static('files'))\n", "date": "Apr 02 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "node js express static folder", "code": "// node js -> express -> basic example: static folder, 404 page\n\nconst express = require('express');\nconst path = require('path');\nconst PORT = process.env.PORT || 5000;\n\nconst app = express();\n\nfunction error404(req, res) {\n  res.status(404);\n\n  if (req.accepts('html')) {\n    res.sendFile(path.join(__dirname, 'public/errors/404.html'));\n    return;\n  }\n\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  \n  res.type('txt').send('404 - Not found');\n}\n\napp\n  .use(express.static(path.join(__dirname, 'public')))\n  .use(error404)\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`));\n", "date": "Jul 06 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "app.use public", "code": "express.static(root, [options])\n", "date": "Apr 02 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "static file", "code": "Static file is any content that can be delivered to an end user without \nhaving to be generated, modified, or processed.", "date": "Jul 09 2020", "vote": 0, "tags": ["javascript", "express", "python"], "posted_by": "Virgin Programmer", "source_name": null, "source_url": null},
{"title": "node express server static files", "code": "var express = require('express');\nvar app = express();\nvar path = require('path');\n\n//app.use(express.static(__dirname)); // Current directory is root\napp.use(express.static(path.join(__dirname, 'public'))); //  \"public\" off of current is root\n\napp.listen(80);\nconsole.log('Listening on port 80');", "date": "May 11 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "JDog", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/10434001/static-files-with-express-js"},
{"title": "express public folder", "code": "app.use(express.static('public'))\napp.use(express.static('files'))\n", "date": "Mar 03 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "lukfd", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "express public", "code": "app.use(express.static(__dirname + '/public'));", "date": "Jul 22 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Doubtful Dog", "source_name": null, "source_url": null},
{"title": "express img folder", "code": "app.use(express.static('public'))\n", "date": "Mar 22 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "use static with expres", "code": "app.use(express.static('directoryName'))\n#store the files in the directory as if you were making a website without express", "date": "Aug 12 2020", "vote": 2, "tags": ["javascript", "express", "whatever"], "posted_by": "Encouraging Elk", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "node js express static folder", "code": "// node js -> express -> basic example: static folder, 404 page\n\nconst express = require('express');\nconst path = require('path');\nconst PORT = process.env.PORT || 5000;\n\nconst app = express();\n\nfunction error404(req, res) {\n  res.status(404);\n\n  if (req.accepts('html')) {\n    res.sendFile(path.join(__dirname, 'public/errors/404.html'));\n    return;\n  }\n\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  \n  res.type('txt').send('404 - Not found');\n}\n\napp\n  .use(express.static(path.join(__dirname, 'public')))\n  .use(error404)\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`));\n", "date": "Jul 06 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express proxy", "code": "//example reverse proxy using http proxy middleware without nginx\nhttps://github.com/restuwahyu13/express-reverse-proxy", "date": "Aug 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express pourquoi mettre bodyparser avant router", "code": "// Vous devez vous assurer que vous d\u00e9finissez toutes les configurations \n// AVANT de d\u00e9finir les itin\u00e9raires. Si vous le faites, \n// vous pouvez continuer \u00e0 utiliser express.bodyParser().\n\nvar express = require('express'),\n    app     = express(),\n    port    = parseInt(process.env.PORT, 10) || 8080;\n\napp.configure(function(){\n  app.use(express.bodyParser());\n  app.use(app.router);\n});\n\napp.listen(port);\n\napp.post(\"/someRoute\", function(req, res) {\n  console.log(req.body);\n  res.send({ status: 'SUCCESS' });\n});\n", "date": "Jul 08 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Super Skimmer", "source_name": "www.it-swarm.dev", "source_url": "https://www.it-swarm.dev/fr/node.js/express.js-req.body-undefined/942304597/"},
{"title": "express payloadtoolarge request entity too large bodyParser raw-body hydra-express", "code": "GOTO node_modules\\hydra-express\\node_modules\\raw-body\\index.js\n\nfunction readStream(stream, encoding, length, limit, callback) {\n\n  \tlimit = 999999999999; //ADD THIS LINE HERE (TO OVERWRITE THE LIMIT)\n    \n    if (limit !== null && length !== null && length > limit) {\n      return done(createError(413, 'request entity too large', {\n        expected: length,\n        length: length,\n        limit: limit,\n        type: 'entity.too.large'\n      }))\n    }\n    \n   ... \n   \n}", "date": "Feb 22 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "DreamCoder", "source_name": null, "source_url": null},
{"title": "passport js", "code": "var GoogleStrategy = require('passport-google-oauth20').Strategy;\n\npassport.use(new GoogleStrategy({\n    clientID: GOOGLE_CLIENT_ID,\n    clientSecret: GOOGLE_CLIENT_SECRET,\n    callbackURL: \"http://www.example.com/auth/google/callback\"\n  },\n  function(accessToken, refreshToken, profile, cb) {\n    User.findOrCreate({ googleId: profile.id }, function (err, user) {\n      return cb(err, user);\n    });\n  }\n));\n", "date": "Apr 30 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Nasty Newt", "source_name": "www.passportjs.org", "source_url": "http://www.passportjs.org/packages/passport-google-oauth20/"},
{"title": "express passport js", "code": "// my github https://github.com/restuwahyu13\nconst { AuthSchema } = require('../models/model.auth')\nconst passport = require('passport')\nconst JwtStrategy = require('passport-jwt').Strategy\nconst ExtractJwt = require('passport-jwt').ExtractJwt\nconst LocalStrategy = require('passport-local').Strategy\n\nexports.passportSerialize = () => {\n  return passport.serializeUser(async (user, done) => {\n    if (user) {\n      const { _id } = user\n      const result = await AuthSchema.findById(_id).lean()\n      if (!result) return done(null, false)\n      return done(null, result._id)\n    }\n    return done(null, false)\n  })\n}\n\nexports.passportDeserialize = () => {\n  return passport.deserializeUser(async (id, done) => {\n    if (id) {\n      const user = await AuthSchema.findById(id).lean()\n      if (!user) return done(null, false)\n      return done(null, user)\n    }\n    return done(null, false)\n  })\n}\n\n// passport local\nexports.passportLocalStrategy = () => {\n  passport.use(\n    'local',\n    new LocalStrategy(async (username, password, done) => {\n      if (username && password) {\n        const user = await AuthSchema.find({ $or: [{ username }, { email: username }] }).lean()\n        const verify = AuthSchema.verifyPassword(password, user[0].password)\n\n        if (!verify) return done(null, false)\n        return done(null, user[0])\n      }\n      return done(null, false)\n    })\n  )\n}\n\n// passport jwt\nexports.passportJwtStrategy = () => {\n  passport.use(\n    'jwt',\n    new JwtStrategy(\n      {\n        secretOrKey: process.env.JWT_SECRET,\n        jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken()\n      },\n      async ({ _id }, done) => {\n        try {\n          const user = await AuthSchema.findById(_id).lean()\n          if (!user) done(null, false)\n          done(null, user)\n        } catch (err) {\n          done(err, false)\n        }\n      }\n    )\n  )\n}", "date": "Jul 30 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express passport js", "code": "// my github https://github.com/restuwahyu13\n\nconst { AuthSchema } = require('../models/model.auth')\nconst GoogleStrategy = require('passport-google-oauth20').Strategy\nconst FacebookStrategy = require('passport-facebook').Strategy\nconst GithubStrategy = require('passport-github').Strategy\n\n// passport facebook\nexports.passportFacebook = () => {\n   return passport.use(\n      new FacebookStrategy(\n         {\n            clientID: process.env.FACEBOOK_ID,\n            clientSecret: process.env.FACEBOOK_SECRET,\n            callbackURL: \"http://localhost:3000/auth/facebook/callback\",\n            profileFields: [\"id\", \"displayName\", \"gender\", \"email\", \"photos\"],\n            enableProof: true,\n         },\n         (accessToken, refreshToken, profile, done) => {\n            authSocialSchema.findOne({idSocial: profile.id}, (err, user) => {\n               if (err) return done(err, false);\n               if (!user) {\n                  authSocialSchema.findOrCreate(\n                     {\n                        idSocial: profile.id,\n                        fullname: profile.displayName,\n                        email: profile.email,\n                        gender: profile.gende,\n                        avatar: profile.photos[0][\"value\"],\n                        provider: profile.provider,\n                        created_at: Date.now(),\n                     },\n                     (err, user) => {\n                        if (err) return done(err, false);\n                        return done(null, user);\n                     }\n                  );\n               } else {\n                  return done(null, user);\n               }\n            });\n         }\n      )\n   );\n}\n\n// passport google\nexports.passportGoogle = () => {\n   return passport.use(\n      new GoogleStrategy(\n         {\n            clientID: process.env.GOOGLE_ID,\n            clientSecret: process.env.GOOGLE_SECRET,\n            callbackURL: \"http://localhost:3000/auth/google/callback\",\n         },\n         (accessToken, refreshToken, profile, done) => {\n            authSocialSchema.findOne({idSocial: profile.id}, (err, user) => {\n               if (err) return done(err, false);\n               if (!user) {\n                  authSocialSchema.findOrCreate(\n                     {\n                        idSocial: profile.id,\n                        fullname: profile.displayName,\n                        email: profile.emails[0][\"value\"],\n                        avatar: profile.photos[0][\"value\"],\n                        provider: profile.provider,\n                        created_at: Date.now(),\n                     },\n                     (err, user) => {\n                        if (err) return done(err, false);\n                        return done(null, user);\n                     }\n                  );\n               } else {\n                  return done(null, user);\n               }\n            });\n         }\n      )\n   );\n}\n\n// passport passport github\nexports.passportGithub = () => {\n   return passport.use(\n      new GithubStrategy(\n         {\n            clientID: process.env.GITHUB_ID,\n            clientSecret: process.env.GITHUB_SECRET,\n            callbackURL: \"http://localhost:3000/auth/github/callback\",\n         },\n         (accessToken, refreshToken, profile, done) => {\n            authSocialSchema.findOne({idSocial: profile.id}, (err, user) => {\n               if (err) return done(err, false);\n               if (!user) {\n                  authSocialSchema.findOrCreate(\n                     {\n                        idSocial: profile.id,\n                        username: profile.username,\n                        fullname: profile.displayName,\n                        avatar: profile.photos[0][\"value\"],\n                        provider: profile.provider,\n                        created_at: Date.now(),\n                     },\n                     (err, user) => {\n                        if (err) return done(err, false);\n                        return done(null, user);\n                     }\n                  );\n               } else {\n                  return done(null, user);\n               }\n            });\n         }\n      )\n   );\n}", "date": "Jul 30 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "passport js", "code": "app.get('/auth/google',\n  passport.authenticate('google', { scope: ['profile'] }));\n\napp.get('/auth/google/callback', \n  passport.authenticate('google', { failureRedirect: '/login' }),\n  function(req, res) {\n    // Successful authentication, redirect home.\n    res.redirect('/');\n  });\n", "date": "Apr 30 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Nasty Newt", "source_name": "www.passportjs.org", "source_url": "http://www.passportjs.org/packages/passport-google-oauth20/"},
{"title": "express param in url", "code": "app.get('/p/:tagId', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.tagId);\n});\n\n// GET /p/5\n// tagId is set to 5\n", "date": "Oct 14 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "SirSundays", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/20089582/how-to-get-a-url-parameter-in-express"},
{"title": "node js express url parameters", "code": "// http://localhost:8080/api/1\napp.get('/api/:version', function(req, res) {\n    res.send(req.params.version);\n});", "date": "Oct 11 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Fair Fowl", "source_name": "www.digitalocean.com", "source_url": "https://www.digitalocean.com/community/tutorials/use-expressjs-to-get-url-and-post-parameters"},
{"title": "req.body is undefined", "code": "var bodyParser = require('body-parser')\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())", "date": "Feb 21 2020", "vote": 10, "tags": ["javascript", "express"], "posted_by": "Enthusiastic Earthworm", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/9177049/express-js-req-body-undefined"},
{"title": "express request body undefined", "code": "npm install body-parser\n// then in your app\nvar express = require('express')\nvar bodyParser = require('body-parser')\n \nvar app = express()\n \n// create application/json parser\nvar jsonParser = bodyParser.json()\n \n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n \n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  res.send('welcome, ' + req.body.username)\n})\n \n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  // create user in req.body\n})\n", "date": "Jan 13 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Almabek", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/9177049/express-js-req-body-undefined"},
{"title": "express post request body undefined", "code": "/* USE:\n\nnpm i body-parser\n*/\n\n// then in your app\nvar express = require('express')\nvar bodyParser = require('body-parser')\n \nvar app = express()\n \n// create application/json parser\nvar jsonParser = bodyParser.json()\n \n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n \n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  res.send('welcome, ' + req.body.username)\n})\n \n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  // create user in req.body\n})", "date": "Jan 11 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "lukfd", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/9177049/express-js-req-body-undefined"},
{"title": "express minify html", "code": "\u00a0var\u00a0express\u00a0\u00a0\u00a0\u00a0=\u00a0require('express');\nvar\u00a0minifyHTML\u00a0=\u00a0require('express-minify-html');\nvar\u00a0app\u00a0=\u00a0express();\napp.use(minifyHTML({\n  override:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0true,\n  exception_url:\u00a0false,\n  htmlMinifier:\u00a0{\n    removeComments:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0true,\n    collapseWhitespace:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0true,\n    collapseBooleanAttributes:\u00a0true,\n    removeAttributeQuotes:\u00a0\u00a0\u00a0\u00a0\u00a0true,\n    removeEmptyAttributes:\u00a0\u00a0\u00a0\u00a0\u00a0true,\n    minifyJS:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0true\u00a0\n  }\n}));\napp.get('hello',\u00a0function\u00a0(req,\u00a0res,\u00a0next)\u00a0{\n  res.render('helloTemplate',\u00a0{\u00a0hello\u00a0:\u00a0'world'},\u00a0function(err,\u00a0html)\u00a0{\n    //\u00a0The\u00a0output\u00a0is\u00a0minified,\u00a0huzzah!\n    console.log(html);\n    res.send(html);\n  })\n});\u00a0", "date": "May 11 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Bored Bird", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express-minify-html"},
{"title": "express mounting router", "code": "var express = require('express')\nvar router = express.Router()\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now())\n  next()\n})\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page')\n})\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds')\n})\n\nmodule.exports = router\n", "date": "Oct 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Xanthous Xenomorph", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "express mounting router", "code": "app.get(/a/, function (req, res) {\n  res.send('/a/')\n})\n", "date": "Oct 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Xanthous Xenomorph", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "express octet stream", "code": "app.get((req, res, next) => {\n  res.setHeader('Content-Type', 'application/octet-stream');\n  res.sendFile('/file/to/be/downloaded.ext');\n  res.status(200);\n});", "date": "Aug 13 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express middleware pass parameter", "code": "function HasRole(role) {\n  return function(req, res, next) {\n    if (role !== req.user.role) res.redirect(...);\n    else next();\n  }\n}", "date": "Jun 17 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Light Locust", "source_name": null, "source_url": null},
{"title": "express multer", "code": "$ npm install --save multer\n\nvar express = require(\"express\");\nvar multer = require('multer');\nvar upload = multer({dest:'uploads/'});", "date": "Nov 26 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Cloudy Crossbill", "source_name": null, "source_url": null},
{"title": "express messages", "code": "app.use(require('connect-flash')());\napp.use(function (req, res, next) {\n  res.locals.messages = require('express-messages')(req, res);\n  next();\n});", "date": "Nov 23 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Encouraging Eagle", "source_name": null, "source_url": null},
{"title": "express multer example", "code": "const multer = require('multer')\nconst { resolve } = require('path')\nconst { existsSync, unlink } = require('fs')\n\nconst diskStorage = multer.diskStorage({\n\tdestination: (req, file, done) => {\n\t\tif (!file) return done(new Error('Upload file error'), null)\n\n\t\tconst fileExits = existsSync(resolve(process.cwd(), `src/images/${file.originalname}`))\n\t\tif (!fileExits) return done(null, resolve(process.cwd(), 'src/images'))\n\n\t\tunlink(resolve(process.cwd(), `src/images/${file.originalname}`), (error) => {\n\t\t\tif (error) return done(error)\n\t\t\treturn done(null, resolve(process.cwd(), 'src/images'))\n\t\t})\n\t},\n\tfilename: (req, file, done) => {\n\t\tif (file) {\n\t\t\tconst extFile = file.originalname.replace('.', '')\n\t\t\tconst extPattern = /(jpg|jpeg|png|gif|svg)/gi.test(extFile)\n\t\t\tif (!extPattern) return done(new TypeError('File format is not valid'), null)\n\t\t\treq.photo = file.originalname\n\t\t\treturn done(null, file.originalname)\n\t\t}\n\t}\n})\n\nconst fileUpload = multer({ storage: diskStorage, limits: 1000000 })\n\nmodule.exports = { fileUpload }", "date": "Dec 15 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "multer()", "code": "var multer = require('multer');\nvar upload = multer({dest:'uploads/'});", "date": "Nov 23 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Encouraging Eagle", "source_name": null, "source_url": null},
{"title": "express multer example", "code": "const multer = require('multer')\nconst { extname, resolve } = require('path')\n\nconst diskStorage = multer.diskStorage({\n\tdestination: (req, file, done) => {\n\t\tif (!file) return done(new Error('Upload file error'), null)\n\t\treturn done(null, resolve(process.cwd(), 'src/images'))\n\t},\n\tfilename: (req, file, done) => {\n\t\tif (file) {\n\t\t\tconst imagePattern = /(jpg|jpeg|png|gif|svg)/gi\n\t\t\tconst mathExt = extname(file.originalname).replace('.', '')\n\n\t\t\tif (!imagePattern.test(mathExt)) {\n\t\t\t\treturn new TypeError('File format is not valid')\n\t\t\t}\n\n\t\t\treq.file = file.originalname\n\t\t\treturn done(null, file.originalname)\n\t\t}\n\t}\n})\n\nconst fileUpload = multer({ storage: diskStorage, limits: 1000000 })\n\nmodule.exports = { fileUpload }", "date": "Dec 15 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Inexpensive Impala", "source_name": null, "source_url": null},
{"title": "multer npm", "code": "$\u00a0npm\u00a0install\u00a0--save\u00a0multer file upload node ", "date": "Apr 04 2020", "vote": 0, "tags": ["javascript", "express", "whatever"], "posted_by": "Moise Mbakop", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/multer"},
{"title": "express multer", "code": "import { Request } from 'express'\nimport multer, { StorageEngine, Multer } from 'multer'\nimport { resolve } from 'path'\n\nconst diskStorage: StorageEngine = multer.diskStorage({\n\tdestination: (req: Request, file: Express.Multer.File, done): void => {\n\t\tif (!file) {\n\t\t\tdone(new Error('Upload file error'), null)\n\t\t} else {\n\t\t\tdone(null, resolve(process.cwd(), 'src/images'))\n\t\t}\n\t},\n\tfilename: (req: any, file: Express.Multer.File, done): void => {\n\t\tdone(null, file.originalname)\n\t}\n})\n\nconst fileValidator = (req: any, file: Express.Multer.File, done): void => {\n\tconst extFile = file.originalname.replace('.', '')\n\tconst extPattern = /(jpg|jpeg|png|gif|svg|doc)/gi.test(extFile)\n\n\tif (!extPattern) {\n\t\tdone(new TypeError('File format is not valid'), null)\n\t} else {\n\t\tdone(null, true)\n\t}\n}\n\nexport const fileUpload = multer({ storage: diskStorage, limits: { fileSize: 1000000 }, fileFilter: fileValidator }) as Multer", "date": "May 08 2021", "vote": 0, "tags": ["javascript", "express", "typescript"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express load a page", "code": "const express = require('express');\nconst app = express();\nconst path = require('path');\nconst router = express.Router();\n\nrouter.get('/',function(req,res){\n  res.sendFile(path.join(__dirname, '/index.html'));\n  //__dirname : It will resolve to your project folder.\n});\n\n// To go back a folder from __dirname\nrouter.get('/about',function(req,res){\n  res.sendFile(path.join(__dirname, '../somefolder/about.html'));\n});", "date": "Aug 16 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "DirtySpaniard", "source_name": null, "source_url": null},
{"title": "express.js server", "code": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000", "date": "Jan 13 2021", "vote": 48, "tags": ["javascript", "express"], "posted_by": "Mehedi Islam Ripon", "source_name": null, "source_url": null},
{"title": "express hello world", "code": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express", "date": "Jul 17 2020", "vote": 35, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "npm express", "code": "$\u00a0npm\u00a0install\u00a0express", "date": "Jul 31 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Innocent Ibex", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "express js server", "code": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));", "date": "Sep 29 2020", "vote": 6, "tags": ["javascript", "express"], "posted_by": "amazingcoder444Rblx", "source_name": null, "source_url": null},
{"title": "node.js express", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "date": "Jun 05 2020", "vote": 15, "tags": ["javascript", "express"], "posted_by": "Vincent Lab", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "express nodejs", "code": "Fast, unopinionated, minimalist web framework for Node.js", "date": "Jan 29 2021", "vote": 3, "tags": ["javascript", "express"], "posted_by": "DevLorenzo", "source_name": null, "source_url": null},
{"title": "how to set file type and size in multer", "code": "var multer = require('multer')\nvar upload = multer().single('avatar')\n\napp.post('/profile', function (req, res) {\n  upload(req, res, function (err) {\n    if (err instanceof multer.MulterError) {\n      // A Multer error occurred when uploading.\n    } else if (err) {\n      // An unknown error occurred when uploading.\n    }\n\n    // Everything went fine.\n  })\n})\n", "date": "Aug 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ill Ibis", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/multer.html"},
{"title": "express middleware status code always 200", "code": "wrap your code with event\n\nres.on('finish', () => {\n// do some thing here\n\n})", "date": "Feb 21 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express multer example", "code": "const multer = require('multer')\nconst { resolve } = require('path')\nconst { existsSync, unlink } = require('fs')\n\nconst diskStorage = multer.diskStorage({\n\tdestination: (req, file, done) => {\n\t\tif (!file) return done(new Error('Upload file error'), null)\n\n\t\tconst fileExits = existsSync(resolve(process.cwd(), `src/images/${file.originalname}`))\n\t\tif (!fileExits) return done(null, resolve(process.cwd(), 'src/images'))\n\n\t\tunlink(resolve(process.cwd(), `src/images/${file.originalname}`), (error) => {\n\t\t\tif (error) return done(error)\n\t\t\treturn done(null, resolve(process.cwd(), 'src/images'))\n\t\t})\n\t},\n\tfilename: (req, file, done) => {\n\t\tif (file) {\n\t\t\tconst extFile = file.originalname.replace('.', '')\n\t\t\tconst extPattern = /(jpg|jpeg|png|gif|svg)/gi.test(extFile)\n\t\t\tif (!extPattern) return done(new TypeError('File format is not valid'), null)\n\t\t\treq.photo = file.originalname\n\t\t\treturn done(null, file.originalname)\n\t\t}\n\t}\n})\n\nconst fileUpload = multer({ storage: diskStorage, limits: 1000000 })\n\nmodule.exports = { fileUpload }", "date": "Dec 15 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "multer()", "code": "var multer = require('multer');\nvar upload = multer({dest:'uploads/'});", "date": "Nov 23 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Encouraging Eagle", "source_name": null, "source_url": null},
{"title": "express multer example", "code": "const multer = require('multer')\nconst { extname, resolve } = require('path')\n\nconst diskStorage = multer.diskStorage({\n\tdestination: (req, file, done) => {\n\t\tif (!file) return done(new Error('Upload file error'), null)\n\t\treturn done(null, resolve(process.cwd(), 'src/images'))\n\t},\n\tfilename: (req, file, done) => {\n\t\tif (file) {\n\t\t\tconst imagePattern = /(jpg|jpeg|png|gif|svg)/gi\n\t\t\tconst mathExt = extname(file.originalname).replace('.', '')\n\n\t\t\tif (!imagePattern.test(mathExt)) {\n\t\t\t\treturn new TypeError('File format is not valid')\n\t\t\t}\n\n\t\t\treq.file = file.originalname\n\t\t\treturn done(null, file.originalname)\n\t\t}\n\t}\n})\n\nconst fileUpload = multer({ storage: diskStorage, limits: 1000000 })\n\nmodule.exports = { fileUpload }", "date": "Dec 15 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Inexpensive Impala", "source_name": null, "source_url": null},
{"title": "multer npm", "code": "$\u00a0npm\u00a0install\u00a0--save\u00a0multer file upload node ", "date": "Apr 04 2020", "vote": 0, "tags": ["javascript", "express", "whatever"], "posted_by": "Moise Mbakop", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/multer"},
{"title": "express limit based on ip", "code": "const rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  max: 100,\n  windowMs: 60 * 60 * 1000,\n  message: 'too many requests sent by this ip, please try again in an hour !'\n});\n\napp.use('<routes>', limiter);  // eg: app.use('/api', limiter);\n", "date": "Jul 03 2020", "vote": 9, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express json body", "code": "$ npm install body-parser\n", "date": "Mar 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/body-parser.html"},
{"title": "express json body", "code": "var bodyParser = require('body-parser')\n", "date": "Mar 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/body-parser.html"},
{"title": "app.listen express", "code": "\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n\n", "date": "Dec 14 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Poor Porcupine", "source_name": "expressjs.com", "source_url": "https://expressjs.com/fr/starter/hello-world.html"},
{"title": "express.js server", "code": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000", "date": "Jan 13 2021", "vote": 48, "tags": ["javascript", "express"], "posted_by": "Mehedi Islam Ripon", "source_name": null, "source_url": null},
{"title": "how to make an express server", "code": "// this is your code\n// ZDev1#4511 on discord if you want more help!\n// first you should install express in the terminal\n// `npm i express`.\nconst express = require('express');\nconst app = express();\n\n// route\napp.get('/', (req,res)=>{\n  // Sending This is the home page! in the page\n  res.send('This is the home page!');\n});\n\n// Listening to the port\nlet PORT = 3000;\napp.listen(PORT)\n\n// FINISH!", "date": "Jul 03 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "ZDev1", "source_name": null, "source_url": null},
{"title": "express js server", "code": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('<h1>Some HTML</h1>');\n  res.send('<p>Even more HTML</p>');\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));", "date": "Sep 29 2020", "vote": 6, "tags": ["javascript", "express"], "posted_by": "amazingcoder444Rblx", "source_name": null, "source_url": null},
{"title": "node.js express", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "date": "Jun 05 2020", "vote": 16, "tags": ["javascript", "express"], "posted_by": "Vincent Lab", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "sample express app", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n", "date": "May 12 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "express js sample project", "code": "var express=require('express');\nvar app=express();\n\napp.get('/',function(req,res){\n\tres.send(\"Hello World!\");\n});\n\nvar server=app.listen(3000,function() {});\n", "date": "May 11 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "JDog", "source_name": "www.guru99.com", "source_url": "https://www.guru99.com/node-js-express.html"},
{"title": "require express server.js", "code": "const\u00a0express\u00a0=\u00a0require('express')const\u00a0app\u00a0=\u00a0express()\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World')})\u00a0app.listen(3000)", "date": "Mar 19 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "How to parse POST requests with express nodejs", "code": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/post-test', (req, res) => {\n    console.log('Got body:', req.body);\n    res.sendStatus(200);\n});\n\napp.listen(8080, () => console.log(`Started server at http://localhost:8080!`));", "date": "May 17 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "m1ke510a", "source_name": null, "source_url": null},
{"title": "express js post request body", "code": "const express = require('express')\n\nconst app = express()\n\napp.use(express.json()) // for parsing application/json\napp.use(express.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded\n\napp.post('/profile', function (req, res, next) {\n  console.log(req.body)\n  res.json(req.body)\n})\n\n", "date": "Oct 16 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "DimAng", "source_name": null, "source_url": null},
{"title": "express receive post data", "code": "const { id } = req.body;", "date": "Nov 12 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "TindyC", "source_name": null, "source_url": null},
{"title": "How to access the request body when POSTing using Node.js and Express", "code": "const express = require('express');\n\nconst app = express();\n\napp.use(express.json({extended: false})); //This is the line that you want to add\n\napp.post('/postroute', (req, res) => {\n    console.log('body :', req.body);\n    res.sendStatus(200);\n});", "date": "Jul 18 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express js project github", "code": "$ npm install -g express-generator@4", "date": "May 07 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Long Ladybird", "source_name": "github.com", "source_url": "https://github.com/expressjs/express"},
{"title": "express-jwt error algorithms should be set", "code": "expressJwt({ secret:  process.env.JWT_SECRET, algorithms: ['RS256'] });\n", "date": "Nov 08 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Sparkling Swiftlet", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/62665636/if-options-algorithms-throw-new-erroralgorithms-should-be-set-error-alg"},
{"title": "user property in express jwt", "code": "jwt({\u00a0secret:\u00a0publicKey,\u00a0requestProperty:\u00a0'auth'\u00a0});", "date": "Jan 22 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Nice Narwhal", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express-jwt"},
{"title": "express jwt", "code": "// JWT MIDDLEWARE\nconst jwt = require('jsonwebtoken')\nconst httpError = require('http-errors')\n\nmodule.exports = (req, res, next) => {\n  try {\n    const tokenHeader = req.headers.authorization.split('Bearer ')[1]\n    const decoded = jwt.verify(tokenHeader, process.env.ACCESS_TOKEN_SECRET)\n    req.user = decoded\n    next()\n  } catch (err) {\n    next(httpError(401))\n  }\n}\n\n// ROUTE LOGIN\napp.get('/protect', authJwt, (req, res) => {\n  console.log(req.user)\n  res.send('aim in proteced route')\n})\n\napp.post('/login', (req, res) => {\n  const bodyPayload = {\n    id: Date.now(),\n    username: req.body.username\n  }\n  const token = signAccessToken(res, bodyPayload)\n  return res.status(200).json(token)\n})\n\napp.post('/refresh-token', (req, res) => {\n  const refreshToken = signRefreshToken(req)\n  res.status(200).json(refreshToken)\n  res.end()\n})\n\n// JWT HELPER\nconst jwt = require('jsonwebtoken')\nconst httpError = require('http-errors')\n\nexports.signAccessToken = (res, payload) => {\n  try {\n    if (payload) {\n      const accessToken = jwt.sign({ ...payload }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1m' })\n      const refreshToken = jwt.sign({ ...payload }, process.env.REFRESH_TOKEN_SECRET, { expiresIn: '90d' })\n      res.cookie('refreshToken', `${refreshToken}`, { expired: 86400 * 90 })\n      return { accessToken, refreshToken }\n    }\n  } catch (err) {\n    return httpError(500, err)\n  }\n}\n\nexports.signRefreshToken = (req) => {\n  try {\n    const getToken = req.cookies.refreshToken\n    if (getToken) {\n      const { id, username } = jwt.verify(getToken, process.env.REFRESH_TOKEN_SECRET)\n      const accesssToken = jwt.sign({ id, username }, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1m' })\n      return { accesssToken }\n    }\n  } catch (err) {\n    return httpError(401, err)\n  }\n}\n", "date": "Nov 05 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express js params", "code": "app.get('/path/:name', function(req, res) { // url: /path/test\n  console.log(req.params.name);  // result: test\n});\n\n// OR\n\napp.get('/path', function(req, res) {  // url: /path?name='test'\n  console.log(req.query['name']);  // result: test\n});", "date": "Jan 29 2021", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Ham-Solo", "source_name": null, "source_url": null},
{"title": "express get params after ?", "code": "GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})", "date": "Jul 03 2020", "vote": 11, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express get url parameters", "code": "app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});", "date": "Jul 03 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express param in url", "code": "app.get('/p/:tagId', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.tagId);\n});\n\n// GET /p/5\n// tagId is set to 5\n", "date": "Oct 14 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "SirSundays", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/20089582/how-to-get-a-url-parameter-in-express"},
{"title": "express route parameters", "code": "Route path: /users/:userId/books/:bookId\nRequest URL: http://localhost:3000/users/34/books/8989\nreq.params: { \"userId\": \"34\", \"bookId\": \"8989\" }\n", "date": "Jul 05 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Motionless Mouse", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "express route parameters", "code": "app.get('/users/:userId/books/:bookId', function (req, res) {\n  res.send(req.params)\n})\n", "date": "Jul 05 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Motionless Mouse", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "express js list all routes", "code": "const listEndpoints = require(\"express-list-endpoints\"); // npm i express-list-endpoints\nconsole.log(listEndpoints(app)); // where app = express();", "date": "Jul 03 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express get all routes and methods", "code": "function print (path, layer) {\n  if (layer.route) {\n    layer.route.stack.forEach(print.bind(null, path.concat(split(layer.route.path))))\n  } else if (layer.name === 'router' && layer.handle.stack) {\n    layer.handle.stack.forEach(print.bind(null, path.concat(split(layer.regexp))))\n  } else if (layer.method) {\n    console.log('%s /%s',\n      layer.method.toUpperCase(),\n      path.concat(split(layer.regexp)).filter(Boolean).join('/'))\n  }\n}\n\nfunction split (thing) {\n  if (typeof thing === 'string') {\n    return thing.split('/')\n  } else if (thing.fast_slash) {\n    return ''\n  } else {\n    var match = thing.toString()\n      .replace('\\\\/?', '')\n      .replace('(?=\\\\/|$)', '$')\n      .match(/^\\/\\^((?:\\\\[.*+?^${}()|[\\]\\\\\\/]|[^.*+?^${}()|[\\]\\\\\\/])*)\\$\\//)\n    return match\n      ? match[1].replace(/\\\\(.)/g, '$1').split('/')\n      : '<complex:' + thing.toString() + '>'\n  }\n}\n\napp._router.stack.forEach(print.bind(null, []))", "date": "Oct 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "florinrelea", "source_name": null, "source_url": null},
{"title": "express js limit access based on rate", "code": "const rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  max: 100,\n  windowMs: 60 * 60 * 1000,\n  message: 'too many requests sent by this ip, please try again in an hour !'\n});\n\napp.use('<routes>', limiter);  // eg: app.use('/api', limiter);", "date": "Jul 12 2020", "vote": 10, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express js redirect to url", "code": "window.location.href = \"http://mywebsite.com/home.html\";", "date": "Jul 18 2019", "vote": 45, "tags": ["javascript", "express"], "posted_by": "Grepper", "source_name": null, "source_url": null},
{"title": "express redirect", "code": "res.redirect('/foo/bar')\nres.redirect('http://example.com')\nres.redirect(301, 'http://example.com')\nres.redirect('../login')\n", "date": "Dec 13 2019", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": null, "source_url": null},
{"title": "express url redirect", "code": "const app = require('express')();\n\n// The `res.redirect()` function sends back an HTTP 302 by default.\n// When an HTTP client receives a response with status 302, it will send\n// an HTTP request to the URL in the response, in this case `/to`\napp.get('/from', (req, res) => {\n  res.redirect('/to');\n});\napp.get('/to', (req, res) => res.send('Hello, World!'));\n", "date": "Jun 12 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "Salo Hopeless", "source_name": "masteringjs.io", "source_url": "https://masteringjs.io/tutorials/express/redirect"},
{"title": "express js redirect to url", "code": "app.all('/secret', function (req, res, next) {\n  console.log('Accessing the secret section ...')\n  next() // pass control to the next handler\n})\n", "date": "Jul 22 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Upset Unicorn", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "express js redirect to url", "code": "// GET method route\napp.get('/', function (req, res) {\n  res.send('GET request to the homepage')\n})\n\n// POST method route\napp.post('/', function (req, res) {\n  res.send('POST request to the homepage')\n})\n", "date": "Jul 22 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Upset Unicorn", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "express js redirect to url", "code": "var express = require('express')\nvar app = express()\n\n// respond with \"hello world\" when a GET request is made to the homepage\napp.get('/', function (req, res) {\n  res.send('hello world')\n})\n", "date": "Jul 22 2020", "vote": -2, "tags": ["javascript", "express"], "posted_by": "Upset Unicorn", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "express js delete request", "code": "app.delete('/user', function (req, res) {\n  res.send('Got a DELETE request at /user')\n})\n", "date": "Mar 19 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ham-Solo", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/basic-routing.html"},
{"title": "node express cors headers", "code": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n", "date": "Mar 24 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Adventurous Aardvark", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "express js cors", "code": "var express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})", "date": "Nov 13 2020", "vote": 20, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "allow cors express", "code": "app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});", "date": "Jun 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": null, "source_url": null},
{"title": "express cors error", "code": "//install\nnpm install cors\n//use\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n", "date": "Sep 20 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "kepl3r", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "cors express", "code": "var allowedOrigins = ['http://localhost:3000',\n                      'http://yourapp.com'];\napp.use(cors({  \n  origin: function(origin, callback){\n    // allow requests with no origin     \n    // (like mobile apps or curl requests)    \n    if(!origin) \n      return callback(null, true);    \n    if(allowedOrigins.indexOf(origin) === -1){\n      var msg = 'The CORS policy for this site does not ' +                \n          'allow access from the specified Origin.';      \n      return callback(new Error(msg), false);    \n    }    \n    return callback(null, true);  \n  }\n}));", "date": "Aug 05 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Enthusiastic Elephant", "source_name": "medium.com", "source_url": "https://medium.com/zero-equals-false/using-cors-in-express-cac7e29b005b"},
{"title": "express cors policy", "code": "$ npm install cors\n", "date": "Mar 22 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Condemned Crane", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "app.listen express", "code": "\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n\n", "date": "Dec 14 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Poor Porcupine", "source_name": "expressjs.com", "source_url": "https://expressjs.com/fr/starter/hello-world.html"},
{"title": "express js example", "code": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express", "date": "Jul 17 2020", "vote": 35, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "sample express app", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n", "date": "May 12 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "express js sample project", "code": "var express=require('express');\nvar app=express();\n\napp.get('/',function(req,res){\n\tres.send(\"Hello World!\");\n});\n\nvar server=app.listen(3000,function() {});\n", "date": "May 11 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "JDog", "source_name": "www.guru99.com", "source_url": "https://www.guru99.com/node-js-express.html"},
{"title": "node js express", "code": "basic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           ", "date": "Apr 02 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Arqa", "source_name": null, "source_url": null},
{"title": "require express server.js", "code": "const\u00a0express\u00a0=\u00a0require('express')const\u00a0app\u00a0=\u00a0express()\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World')})\u00a0app.listen(3000)", "date": "Mar 19 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "node.js express", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "date": "Jun 05 2020", "vote": 16, "tags": ["javascript", "express"], "posted_by": "Vincent Lab", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "express js", "code": "\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n\n", "date": "Dec 18 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "The French Doctor", "source_name": "expressjs.com", "source_url": "https://expressjs.com/fr/starter/hello-world.html"},
{"title": "setup node js express basic setup", "code": "npm init -y\nnpm i express\n", "date": "Jul 03 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express js", "code": "\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n\n", "date": "Nov 26 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Talented Toucan", "source_name": "expressjs.com", "source_url": "https://expressjs.com/fr/starter/hello-world.html"},
{"title": "express js", "code": "Express.js, or simply Express, is a web application framework for Node.js,\nreleased as free and open-source software under the MIT License.\n\nIt is designed for building web applications and APIs.\nIt has been called the de facto standard server framework for Node.js.", "date": "Jun 16 2020", "vote": 9, "tags": ["javascript", "express"], "posted_by": "Fylls", "source_name": null, "source_url": null},
{"title": "express js", "code": "Express is a minimal and flexible Node.js web application framework\nthat provides a robust set of features for web and mobile\napplications.", "date": "Apr 14 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Fylls", "source_name": null, "source_url": null},
{"title": "express img folder", "code": "app.use(express.static('public'))\n", "date": "Mar 22 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Testy Tamarin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/static-files.html"},
{"title": "express js continous GET /json/version", "code": "probably you are using chrome, if so,\ngoto: chrome://inspect/#devices\nclick on \"Open dedicated DevTools for Node\"\nremove your locahost:[port] from listening\n", "date": "May 02 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Old Knight", "source_name": null, "source_url": null},
{"title": "express js basic example", "code": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express", "date": "Jul 17 2020", "vote": 35, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "node.js express", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "date": "Jun 05 2020", "vote": 16, "tags": ["javascript", "express"], "posted_by": "Vincent Lab", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "sample express app", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n", "date": "May 12 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "node js express", "code": "basic server\n\nconst express =require('express');\nconst app = express();\nconst PORT = 5000;\n\n\napp.get('/',(req,res)=>{\n   res.json({message: 'Welcome to the backend'})\n})\n\n\napp.listen(PORT ,()=>console.log(`Connected to ${PORT}`)\n           \n           ", "date": "Apr 02 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Arqa", "source_name": null, "source_url": null},
{"title": "require express server.js", "code": "const\u00a0express\u00a0=\u00a0require('express')const\u00a0app\u00a0=\u00a0express()\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World')})\u00a0app.listen(3000)", "date": "Mar 19 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "express grpc example", "code": "example express grpc using typescript easy to understand, before starting using grpc, please read this article below\n\nhttps://github.com/restuwahyu13/express-grpc-rest-api\n\nwhat is grpc : https://bit.ly/3c892HO\nwhat is protocol buffer: https://bit.ly/3qPTxZw", "date": "Jan 24 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Restu Wahyu Saputra", "source_name": null, "source_url": null},
{"title": "express getting options instead of post", "code": "// 'OPTIONS' is a standard request send by browsers BEFORE your request\n// Your server needs to handle these requests appropriately\n// Please see source and upvote the answer I got this from to share credit\n\nvar express = require('express')\n  , cors = require('cors')\n  , app = express();\nconst corsOptions = {\n  origin: true,\n  credentials: true\n}\napp.options('*', cors(corsOptions)); // preflight OPTIONS; put before other routes\napp.listen(80, function(){\n  console.log('CORS-enabled web server listening on port 80');\n});", "date": "Oct 26 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Master Cheeto Fu", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/46904400/why-do-i-get-an-options-request-after-making-a-post-request"},
{"title": "https with express", "code": "const fs = require('fs');\nconst https = require('https');\n\nconst app = require('express')();\napp.get('*', (req, res) => res.send('<h1>Hello, World</h1>'));\n\nconst server = https.createServer({\n  key: fs.readFileSync(`${__dirname}/localhost-key.pem`, 'utf8'),\n  cert: fs.readFileSync(`${__dirname}/localhost.pem`, 'utf8')\n}, app);\n\nawait server.listen(443);", "date": "Feb 13 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Black Hole", "source_name": "masteringjs.io", "source_url": "https://masteringjs.io/tutorials/express/https"},
{"title": "express http to https", "code": "var\u00a0express\u00a0=\u00a0require('express');var\u00a0app\u00a0=\u00a0express();\u00a0var\u00a0redirectToHTTPS\u00a0=\u00a0require('express-http-to-https').redirectToHTTPS\u00a0//\u00a0Don't\u00a0redirect\u00a0if\u00a0the\u00a0hostname\u00a0is\u00a0`localhost:port`\u00a0or\u00a0the\u00a0route\u00a0is\u00a0`/insecure`app.use(redirectToHTTPS([/localhost:(\\d{4})/],\u00a0[/\\/insecure/],\u00a0301));\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World!');});\u00a0app.get('/insecure',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Dangerous!');});\u00a0app.listen(3000,\u00a0function\u00a0()\u00a0{\u00a0\u00a0console.log('Example\u00a0app\u00a0listening\u00a0on\u00a0port\u00a03000!');});\u00a0app.listen(8080,\u00a0function\u00a0()\u00a0{\u00a0\u00a0console.log('Example\u00a0app\u00a0listening\u00a0on\u00a0port\u00a08080\u00a0insecurely!');});", "date": "Apr 02 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Uninterested Unicorn", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express-http-to-https"},
{"title": "express get url parameters", "code": "app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});", "date": "Jul 03 2020", "vote": 8, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "node js express url parameters", "code": "// http://localhost:8080/api/1\napp.get('/api/:version', function(req, res) {\n    res.send(req.params.version);\n});", "date": "Oct 11 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Fair Fowl", "source_name": "www.digitalocean.com", "source_url": "https://www.digitalocean.com/community/tutorials/use-expressjs-to-get-url-and-post-parameters"},
{"title": "express route parameters", "code": "Route path: /users/:userId/books/:bookId\nRequest URL: http://localhost:3000/users/34/books/8989\nreq.params: { \"userId\": \"34\", \"bookId\": \"8989\" }\n", "date": "Jul 05 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Motionless Mouse", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/routing.html"},
{"title": "expressjs receive url parameter", "code": "URL Parameters\nThese are information that are passed through the URL like so:\n\nhttp://example.com/api/users?id=4&token=sdfa3&geo=us", "date": "Jan 25 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ham-Solo", "source_name": "www.digitalocean.com", "source_url": "https://www.digitalocean.com/community/tutorials/use-expressjs-to-get-url-and-post-parameters"},
{"title": "express get slash value", "code": "app.get('/new/:url(.*)', (req, res) => {\n  console.log(req.params.url) // will output 'https://www.google.com'\n// --- OR ---\napp.get('/new/:url(*)', (req, res) => {\n  console.log(req.params.url) // will output 'https://www.google.com'", "date": "Apr 25 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "feddynventor", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/42351738/dealing-with-slash-characters-in-request-parameter-using-express-route"},
{"title": "nodejs hello world", "code": "const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});", "date": "Aug 22 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "IrwinRdz", "source_name": "nodejs.org", "source_url": "https://nodejs.org/en/docs/guides/getting-started-guide/"},
{"title": "express hello world", "code": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express", "date": "Jul 17 2020", "vote": 35, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "sample express app", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n", "date": "May 12 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "require express server.js", "code": "const\u00a0express\u00a0=\u00a0require('express')const\u00a0app\u00a0=\u00a0express()\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World')})\u00a0app.listen(3000)", "date": "Mar 19 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "create express server local", "code": "// create directory\n\n//npm init -y\n//npm i express --save\n\n//create public directory\n//create server.js\n\n// <---- In the server js file --->\n\n'use strict';\n\nconst express = require('express');\nconst app = express();\napp.use(express.static('public'));// to connect with frontend html\napp.use(express.json());//body parse\n\napp.get('/', function(req,res){\n\tres.send('This is the Homepage');\n  \t//res.sendFile('index.html');\n});\n\napp.listen(3000);\n", "date": "Jan 07 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Creepy G\u00e1bor", "source_name": "stackabuse.com", "source_url": "https://stackabuse.com/how-to-start-a-node-server-examples-with-the-most-popular-frameworks/"},
{"title": "express get remote ip", "code": "var ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;", "date": "Apr 09 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Im_Arxus", "source_name": null, "source_url": null},
{"title": "express get raw query", "code": "const url = require('url');\nconst express = require('express');\n\nconst app = express();\napp.use((req, res, next) => {\n  const query = url.parse(req.url).query;\n  // Do something...\n});\n\nconst port = 3000;\napp.listen(port, console.log(`Listening on port ${port}.`));", "date": "Aug 27 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express get raw path", "code": "const url = require('url');\nconst express = require('express');\n\nconst app = express();\napp.use((req, res, next) => {\n  const path = url.parse(req.url).path;\n  // Do something...\n});\n\nconst port = 3000;\napp.listen(port, console.log(`Listening on port ${port}.`));", "date": "Aug 27 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express get request origin", "code": "app.use((req, res, next) => {\n  const host = req.get('host');\n  const origin = req.get('origin');\n});", "date": "Aug 27 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express get port from request", "code": "const proxyHost = req.headers[\"x-forwarded-host\"];\nconst host ? proxyHost : req.headers.host;\n", "date": "Dec 24 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Old Knight", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/39879532/nodejs-express-hostname-with-port-from-the-req-object"},
{"title": "express get params after ?", "code": "GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})", "date": "Jul 03 2020", "vote": 11, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express get url parameters", "code": "app.get('/path/:name', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.name);\n});", "date": "Jul 03 2020", "vote": 8, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express get full url", "code": "var fullUrl = req.protocol + '://' + req.get('host') + req.originalUrl;", "date": "Jun 10 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Doubtful Dog", "source_name": null, "source_url": null},
{"title": "express get host url", "code": "const hostWithProtocol = req.protocol + '://' + req.get('host')", "date": "Nov 28 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Super Envious Emu", "source_name": null, "source_url": null},
{"title": "express get full url", "code": "var fullUrl = req.protocol + '://' + req.get('host') + req.originalUrl;", "date": "Jun 10 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Doubtful Dog", "source_name": null, "source_url": null},
{"title": "express get cookie", "code": "const cookieParser = require('cookie-parser');\nconst express = require('express');\nconst app = express();\napp.use(cookieParser());\n\napp.get('/', (req, res) => {\n  console.log('Cookies: ', req.cookies);\n  console.log('Signed Cookies: ', req.signedCookies);\n});\n\napp.listen(3000);", "date": "Aug 27 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express cookies", "code": "const express = require('express');\nconst cookieParser = require('cookie-parser');\n\nconst app = express();\napp.use(cookieParser());\n\napp.get('/', (req, res) => {\n  res.send(req.cookies);\n});\n\napp.listen(3000);", "date": "Sep 19 2020", "vote": -1, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express js list all routes", "code": "const listEndpoints = require(\"express-list-endpoints\"); // npm i express-list-endpoints\nconsole.log(listEndpoints(app)); // where app = express();", "date": "Jul 03 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express get all routes and methods", "code": "function print (path, layer) {\n  if (layer.route) {\n    layer.route.stack.forEach(print.bind(null, path.concat(split(layer.route.path))))\n  } else if (layer.name === 'router' && layer.handle.stack) {\n    layer.handle.stack.forEach(print.bind(null, path.concat(split(layer.regexp))))\n  } else if (layer.method) {\n    console.log('%s /%s',\n      layer.method.toUpperCase(),\n      path.concat(split(layer.regexp)).filter(Boolean).join('/'))\n  }\n}\n\nfunction split (thing) {\n  if (typeof thing === 'string') {\n    return thing.split('/')\n  } else if (thing.fast_slash) {\n    return ''\n  } else {\n    var match = thing.toString()\n      .replace('\\\\/?', '')\n      .replace('(?=\\\\/|$)', '$')\n      .match(/^\\/\\^((?:\\\\[.*+?^${}()|[\\]\\\\\\/]|[^.*+?^${}()|[\\]\\\\\\/])*)\\$\\//)\n    return match\n      ? match[1].replace(/\\\\(.)/g, '$1').split('/')\n      : '<complex:' + thing.toString() + '>'\n  }\n}\n\napp._router.stack.forEach(print.bind(null, []))", "date": "Oct 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "florinrelea", "source_name": null, "source_url": null},
{"title": "express get query params from url", "code": "GET /something?color1=red&color2=blue\n\napp.get('/something', (req, res) => {\n    req.query.color1 === 'red'  // true\n    req.query.color2 === 'blue' // true\n})", "date": "Jul 03 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/17007997/how-to-access-the-get-parameters-after-in-express"},
{"title": "get query parameters in node.js", "code": "var express = require('express');\nvar app = express();\n\napp.get('/', function(req, res){\n  res.send('id: ' + req.query.id);\n});\n\napp.listen(3000);", "date": "May 14 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Fair Finch", "source_name": null, "source_url": null},
{"title": "expressjs query params", "code": "// GET /search?q=tobi+ferret\nconsole.dir(req.query.q)\n// => 'tobi ferret'\n\n// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse\nconsole.dir(req.query.order)\n// => 'desc'\n\nconsole.dir(req.query.shoe.color)\n// => 'blue'\n\nconsole.dir(req.query.shoe.type)\n// => 'converse'\n\n// GET /shoes?color[]=blue&color[]=black&color[]=red\nconsole.dir(req.query.color)\n// => ['blue', 'black', 'red']\n", "date": "May 29 2020", "vote": 6, "tags": ["javascript", "express"], "posted_by": "Lucky Lapwing", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/api.html"},
{"title": "express error handling", "code": "app.use(function (err, req, res, next) {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\n", "date": "Nov 22 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Rich Rabbit", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/error-handling.html"},
{"title": "express generator error handling", "code": "app.get('/', function (req, res) {\n  throw new Error('BROKEN') // Express will catch this on its own.\n})\n", "date": "Nov 23 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Strange Shrew", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/guide/error-handling.html"},
{"title": "express bodyparser multipart/form-data", "code": "var express = require('express');\nvar bodyParser = require('body-parser');\nvar multer = require('multer');\nvar upload = multer();\nvar app = express();\n\napp.get('/', function(req, res){\n   res.render('form');\n});\n\napp.set('view engine', 'pug');\napp.set('views', './views');\n\n// for parsing application/json\napp.use(bodyParser.json()); \n\n// for parsing application/xwww-\napp.use(bodyParser.urlencoded({ extended: true })); \n//form-urlencoded\n\n// for parsing multipart/form-data\napp.use(upload.any()); \napp.use(express.static('public'));\n\napp.post('/', function(req, res){\n   console.log(req.body);\n   res.send(\"recieved your request!\");\n});\napp.listen(3000);", "date": "May 06 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Wide-eyed Wolf", "source_name": "www.tutorialspoint.com", "source_url": "https://www.tutorialspoint.com/expressjs/expressjs_form_data.htm"},
{"title": "express get all endpoints", "code": "const routes = {}\nfunction routerRecursion(middleware, pointer, currentName) {\n  if (middleware.route) { // routes registered directly on the app\n    if (!Array.isArray(pointer['routes'])) {\n      pointer['routes'] = []\n    }\n    const routeObj = {\n      path: middleware.route.path,\n      method: middleware.route.stack[0].method\n    }\n    pointer['routes'].push(routeObj)\n  } else if (middleware.name === 'router') { // inside router\n    const current = middleware.regexp.toString().replace(/\\/\\^\\\\\\//, '').replace(/\\\\\\/\\?\\(\\?\\=\\\\\\/\\|\\$\\)\\/\\i/, '')\n    pointer[current] = {}\n    middleware.handle.stack.forEach(function (handler) {\n      routerRecursion(handler, pointer[current], current)\n    });\n  }\n}\napp._router.stack.forEach(function (middleware) {\n  routerRecursion(middleware, routes, 'main')\n});\nconsole.log(routes);", "date": "Mar 23 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "David Diamant", "source_name": null, "source_url": null},
{"title": "express bodyparser deprecated", "code": "The package bodyParser is deprecated. You will get this warning with these lines of code:\n\napp.use(bodyparser.json()); \napp.use(bodyParser.urlencoded({extended: true}));\n\nIf you are using Express 4.16+ you can now replace those lines with:\n\napp.use(express.json()); \napp.use(express.urlencoded()); //Parse URL-encoded bodies", "date": "Mar 25 2021", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Fancy Ferret", "source_name": "medium.com", "source_url": "https://medium.com/@mmajdanski/express-body-parser-and-why-may-not-need-it-335803cd048c"},
{"title": "express bodyparser deprecated", "code": "body-parser has been deprecated from express v4.* \nUse body-parser package instead.\nnpm i body-parser\n\nimport bodyParser from \"body-parser\";//for typscript code only, use require for js\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));", "date": "Apr 06 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Live to Code", "source_name": null, "source_url": null},
{"title": "body-parser deprecated", "code": "app.use(bodyParser.urlencoded());\n\napp.use(bodyParser.json());", "date": "Jul 16 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Outrageous Orangutan", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/24330014/bodyparser-is-deprecated-express-4"},
{"title": "body parser express", "code": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n", "date": "Jul 21 2020", "vote": 10, "tags": ["javascript", "express"], "posted_by": "Philan ISithembiso", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/body-parser.html"},
{"title": "body-parser npm", "code": "$\u00a0npm\u00a0install\u00a0body-parser", "date": "May 30 2020", "vote": 0, "tags": ["javascript", "express", "whatever"], "posted_by": "Thankful Tortoise", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/body-parser"},
{"title": "body parser", "code": "var\u00a0express\u00a0=\u00a0require('express')\n  var\u00a0bodyParser\u00a0=\u00a0require('body-parser')\n  var\u00a0app\u00a0=\u00a0express()\n  //\u00a0parseapplication/x-www-form-urlencoded\n  app.use(bodyParser.urlencoded({\u00a0extended:\u00a0false\u00a0}))\n  //\u00a0parse\u00a0application/json\n  app.use(bodyParser.json())\u00a0app.use(function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.setHeader('Content-Type',\u00a0'text/plain')\u00a0\u00a0res.write('you\u00a0posted:\\n')\u00a0\u00a0res.end(JSON.stringify(req.body,\u00a0null,\u00a02))})", "date": "Jun 26 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Jules", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/body-parser"},
{"title": "body parser express", "code": "app.use(express.json()); //Used to parse JSON bodies", "date": "Jan 08 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Obedient Otter", "source_name": "medium.com", "source_url": "https://medium.com/@mmajdanski/express-body-parser-and-why-may-not-need-it-335803cd048c"},
{"title": "express bodyparser", "code": "/** @format */\n\nconst express = require(\"express\");\nconst app = express();\nconst mongoose = require(\"mongoose\");\nconst bodyParser = require(\"body-parser\");\nconst PORT = process.env.PORT || 3000;\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }));\n\n// parse application/json\napp.use(bodyParser.json());\n\n//connecting to db\ntry {\n    mongoose.connect('mongodb://localhost/YOUR_DB_NAME', {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      \tuseCreateIndex: true,\n      }, () =>\n      console.log(\"connected\"));\n  } catch (error) {\n    console.log(\"could not connect\");\n  }\n\napp.get(\"/\", (req, res) => {\n  res.send(\"home\");\n});\n\napp.listen(PORT, () => console.log(`Server is listening on port ${PORT}`));\n", "date": "Dec 30 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Busy Butterfly", "source_name": null, "source_url": null},
{"title": "express bodyparser", "code": "const express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n\n", "date": "Dec 30 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Busy Butterfly", "source_name": null, "source_url": null},
{"title": "express.js server", "code": "/* ====== create node.js server with express.js framework ====== */\n// dependencies\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n   res.send(\"This is home page.\");\n});\n\napp.post(\"/\", (req, res) => {\n   res.send(\"This is home page with post request.\");\n});\n\n// PORT\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n   console.log(`Server is running on PORT: ${PORT}`);\n});\n\n\n// ======== Instructions ========\n// save this as index.js\n// you have to download and install node.js on your machine\n// open terminal or command prompt\n// type node index.js\n// find your server at http://localhost:3000", "date": "Jan 13 2021", "vote": 48, "tags": ["javascript", "express"], "posted_by": "Mehedi Islam Ripon", "source_name": null, "source_url": null},
{"title": "express hello world", "code": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express", "date": "Jul 17 2020", "vote": 35, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "express redirect", "code": "app.get('/', (req, res) => {\n  res.redirect('/foo/bar');\n});", "date": "Jul 18 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express router file", "code": "var express = require('express');\nvar router = express.Router();\n\n// middleware that is specific to this router\nrouter.use(function timeLog (req, res, next) {\n  console.log('Time: ', Date.now());\n  next();\n});\n// define the home page route\nrouter.get('/', function (req, res) {\n  res.send('Birds home page');\n});\n// define the about route\nrouter.get('/about', function (req, res) {\n  res.send('About birds');\n});\n\nmodule.exports = router;", "date": "May 03 2020", "vote": 7, "tags": ["javascript", "express"], "posted_by": "Lively Loris", "source_name": null, "source_url": null},
{"title": "app.get", "code": "const express = require('express');\nconst app = express();\n\nconst { getElementById, getIndexById, updateElement,\n  seedElements, createElement } = require('./utils');\n\nconst PORT = process.env.PORT || 4001;\n// Use static server to serve the Express Yourself Website\napp.use(express.static('public'));\n\nconst expressions = [];\nseedElements(expressions, 'expressions');\nconst animals = [];\nseedElements(animals, 'animals');\n\n// Get all expressions\napp.get('/expressions', (req, res, next) => {\n  res.send(expressions);\n});\n\n// Get a single expression\napp.get('/expressions/:id', (req, res, next) => {\n  const foundExpression = getElementById(req.params.id, expressions);\n  if (foundExpression) {\n    res.send(foundExpression);\n  } else {\n    res.status(404).send();\n  }\n});\n\n// Update an expression\napp.put('/expressions/:id', (req, res, next) => {\n  const expressionIndex = getIndexById(req.params.id, expressions);\n  if (expressionIndex !== -1) {\n    updateElement(req.params.id, req.query, expressions);\n    res.send(expressions[expressionIndex]);\n  } else {\n    res.status(404).send();\n  }\n});\n\n// Create an expression\napp.post('/expressions', (req, res, next) => {\n  const receivedExpression = createElement('expressions', req.query);\n  if (receivedExpression) {\n    expressions.push(receivedExpression);\n    res.status(201).send(receivedExpression);\n  } else {\n    res.status(400).send();\n  }\n});\n\n// Delete an expression\napp.delete('/expressions/:id', (req, res, next) => {\n  const expressionIndex = getIndexById(req.params.id, expressions);\n  if (expressionIndex !== -1) {\n    expressions.splice(expressionIndex, 1);\n    res.status(204).send();\n  } else {\n    res.status(404).send();\n  }\n});\n\n// Get all animals\napp.get('/animals', (req, res, next) => {\n  res.send(animals);\n});\n\n// Get a single animal\napp.get('/animals/:id', (req, res, next) => {\n  const animal = getElementById(req.params.id, animals);\n  if (animal) {\n    res.send(animal);\n  } else {\n    res.status(404).send();\n  }\n});\n\n// Create an animal\napp.post('/animals', (req, res, next) => {\n  const receivedAnimal = createElement('animals', req.query);\n  if (receivedAnimal) {\n    animals.push(receivedAnimal);\n    res.status(201).send(receivedAnimal);\n  } else {\n    res.status(400).send();\n  }\n});\n\n// Update an animal\napp.put('/animals/:id', (req, res, next) => {\n  const animalIndex = getIndexById(req.params.id, animals);\n  if (animalIndex !== -1) {\n    updateElement(req.params.id, req.query, animals);\n    res.send(animals[animalIndex]);\n  } else {\n    res.status(404).send();\n  }\n});\n\n// Delete a single animal\napp.delete('/animals/:id', (req, res, next) => {\n  const animalIndex = getIndexById(req.params.id, animals);\n  if (animalIndex !== -1) {\n    animals.splice(animalIndex, 1);\n    res.status(204).send();\n  } else {\n    res.status(404).send();\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is listening on ${PORT}`);\n});", "date": "Sep 07 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Jealous Jellyfish", "source_name": null, "source_url": null},
{"title": "express get", "code": "app.get('/index', (req, res) => {\n    res.render('index')\n})", "date": "Feb 22 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Comfortable Cottonmouth", "source_name": null, "source_url": null},
{"title": "express and node pakages", "code": "var express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n   res.send('Hello World');\n})\n\nvar server = app.listen(8081, function () {\n   var host = server.address().address\n   var port = server.address().port\n   \n   console.log(\"Example app listening at http://%s:%s\", host, port)\n})", "date": "Dec 16 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Mystic Dev", "source_name": "www.tutorialspoint.com", "source_url": "https://www.tutorialspoint.com/nodejs/nodejs_express_framework.htm"},
{"title": "express and node pakages", "code": "var express = require('express');\nvar app = express();\n\napp.use(express.static('public'));\n\napp.get('/', function (req, res) {\n   res.send('Hello World');\n})\n\nvar server = app.listen(8081, function () {\n   var host = server.address().address\n   var port = server.address().port\n\n   console.log(\"Example app listening at http://%s:%s\", host, port)\n})", "date": "Dec 16 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Mystic Dev", "source_name": "www.tutorialspoint.com", "source_url": "https://www.tutorialspoint.com/nodejs/nodejs_express_framework.htm"},
{"title": "express and node pakages", "code": "var express = require('express');\nvar app = express();\n\n// This responds with \"Hello World\" on the homepage\napp.get('/', function (req, res) {\n   console.log(\"Got a GET request for the homepage\");\n   res.send('Hello GET');\n})\n\n// This responds a POST request for the homepage\napp.post('/', function (req, res) {\n   console.log(\"Got a POST request for the homepage\");\n   res.send('Hello POST');\n})\n\n// This responds a DELETE request for the /del_user page.\napp.delete('/del_user', function (req, res) {\n   console.log(\"Got a DELETE request for /del_user\");\n   res.send('Hello DELETE');\n})\n\n// This responds a GET request for the /list_user page.\napp.get('/list_user', function (req, res) {\n   console.log(\"Got a GET request for /list_user\");\n   res.send('Page Listing');\n})\n\n// This responds a GET request for abcd, abxcd, ab123cd, and so on\napp.get('/ab*cd', function(req, res) {   \n   console.log(\"Got a GET request for /ab*cd\");\n   res.send('Page Pattern Match');\n})\n\nvar server = app.listen(8081, function () {\n   var host = server.address().address\n   var port = server.address().port\n   \n   console.log(\"Example app listening at http://%s:%s\", host, port)\n})", "date": "Dec 16 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Mystic Dev", "source_name": "www.tutorialspoint.com", "source_url": "https://www.tutorialspoint.com/nodejs/nodejs_express_framework.htm"},
{"title": "node.js express", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "date": "Jun 05 2020", "vote": 16, "tags": ["javascript", "express"], "posted_by": "Vincent Lab", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "express and node", "code": "// Load HTTP module\nconst http = require(\"http\");\n\nconst hostname = \"127.0.0.1\";\nconst port = 8000;\n\n// Create HTTP server \nconst server = http.createServer((req, res) => {\n\n   // Set the response HTTP header with HTTP status and Content type\n   res.writeHead(200, {'Content-Type': 'text/plain'});\n   \n   // Send the response body \"Hello World\"\n   res.end('Hello World\\n');\n});\n\n// Prints a log once the server starts listening\nserver.listen(port, hostname, () => {\n   console.log(`Server running at http://${hostname}:${port}/`);\n})\n", "date": "Nov 23 2019", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Swallow Tail Gull", "source_name": null, "source_url": null},
{"title": "node express", "code": "npm install express --save", "date": "Jan 12 2021", "vote": -1, "tags": ["javascript", "express"], "posted_by": "Almabek", "source_name": null, "source_url": null},
{"title": "express 404", "code": "\n// Dopo tutte le altre route\n\napp.get('*', function(req, res, next) {\n    var err = new Error();\n    err.status = 404;\n    next(err);\n});\n\napp.use(function(err, req, res, next) {\n    if (err.status === 404) {\n        var data = {\n            title: '404 Not Found',\n            content: 'Oops, page not found!';\n        };\n        res.render('pages/404', data);\n    } else {\n        return next();\n    }\n});\n\n", "date": "Mar 24 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Aleben", "source_name": "gabrieleromanato.com", "source_url": "https://gabrieleromanato.com/2015/12/node-js-creare-una-pagina-di-errore-404-con-express"},
{"title": "set 404 handling via express in node", "code": "app.use(function(req, res, next){\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.render('404', { url: req.url });\n    return;\n  }\n\n  // respond with json\n  if (req.accepts('json')) {\n    res.send({ error: 'Not found' });\n    return;\n  }\n\n  // default to plain-text. send()\n  res.type('txt').send('Not found');\n});", "date": "May 25 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Pleasant Pelican", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/a/9802006"},
{"title": "node express dynamic route and error handler", "code": "app.use(function (req, res, next) {\n  res.status(404).send(\"Sorry can't find that!\")\n})\n", "date": "Jan 28 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/faq.html"},
{"title": "express 404", "code": "app.use(function(req, res, next){\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.sendFile('index.html');\n    return;\n  }\n\n  // respond with json\n  if (req.accepts('json')) {\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n\n  // default to plain-text. send()\n  res.type('txt').send('404 - Not found');\n});", "date": "Jul 06 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "0nline", "source_name": null, "source_url": null},
{"title": "express redirect", "code": "res.redirect('/foo/bar')\nres.redirect('http://example.com')\nres.redirect(301, 'http://example.com')\nres.redirect('../login')\n", "date": "Dec 13 2019", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": null, "source_url": null},
{"title": "express get", "code": "app.get('/index', (req, res) => {\n    res.render('index')\n})", "date": "Feb 22 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Comfortable Cottonmouth", "source_name": null, "source_url": null},
{"title": "http header express", "code": "app.get('/', (req, res) => {\n  req.header('User-Agent')\n})\n// Use the Request.header() method to access\n//one individual request header\u2019s value", "date": "Apr 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Creepy Copperhead", "source_name": "flaviocopes.com", "source_url": "https://flaviocopes.com/express-headers/"},
{"title": "express", "code": "Express.js, or simply Express, is a web application framework for Node.js,\nreleased as free and open-source software under the MIT License.\n\nIt is designed for building web applications and APIs.\nIt has been called the de facto standard server framework for Node.js.", "date": "Jun 16 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Fylls", "source_name": null, "source_url": null},
{"title": "express api", "code": "app.render('email', function (err, html) {\n  // ...\n})\n\napp.render('email', { name: 'Tobi' }, function (err, html) {\n  // ...\n})\n", "date": "Feb 05 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Weary Wasp", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/api.html#app.render"},
{"title": "error sending empty object express", "code": "return res.status(401).send({ error : err.message });", "date": "Apr 16 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Justified Justice", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/44152189/error-in-promise-not-sending-any-error-in-response-object-in-nodejs-express-mong"},
{"title": "express ejs", "code": "let express = require('express');\nlet app = express();\n\napp.set('view engine', 'ejs');\n\napp.get('/', (req, res) => {\n  res.render('index', {foo: 'FOO'});\n});\n\napp.listen(4000, () => console.log('Example app listening on port 4000!'));", "date": "Mar 30 2020", "vote": 8, "tags": ["javascript", "express"], "posted_by": "Relieved Ratel", "source_name": "github.com", "source_url": "https://github.com/mde/ejs/wiki/Using-EJS-with-Express"},
{"title": "ejs express layouts", "code": "var\u00a0express\u00a0=\u00a0require('express');\nvar\u00a0expressLayouts\u00a0=\u00a0require('express-ejs-layouts');\u00a0\nvar\u00a0app\u00a0=\u00a0express();\u00a0app.set('view\u00a0engine',\u00a0'ejs');\napp.use(expressLayouts);\u00a0\napp.get('/',\u00a0function(req,\u00a0res)\u00a0{\u00a0\n  var\u00a0locals\u00a0=\u00a0{\u00a0\u00a0\u00a0\u00a0\n    title:\u00a0'Page\u00a0Title',\u00a0\u00a0\u00a0\u00a0\n    description:\u00a0'Page\u00a0Description',\u00a0\u00a0\u00a0\u00a0\n    header:\u00a0'Page\u00a0Header'\u00a0\u00a0};\n  res.render('the-view',\u00a0locals);\n});\u00a0app.listen(3000);", "date": "May 15 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Bored Bird", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express-ejs-layouts"},
{"title": "download binary files in express", "code": "var options = {\n    method: 'GET',\n    host: 'localhost',\n    port: port,\n    path: '/file'\n  };\n\nvar request = http.request(options, function(response) { \n  var data = []; \n\n  response.on('data', function(chunk) { \n    data.push(chunk); \n  }); \n\n  response.on('end', function() { \n    data = Buffer.concat(data); // do something with data \n  }); \n}); \n\nrequest.end();\n", "date": "May 05 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Clumsy Cicada", "source_name": "spin.atomicobject.com", "source_url": "https://spin.atomicobject.com/2015/10/03/remote-pfs-node-js-express/"},
{"title": "csurf in express", "code": "var bodyParser = require('body-parser')\nvar cookieParser = require('cookie-parser')\nvar csrf = require('csurf')\nvar express = require('express')\n\nvar app = express()\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(cookieParser())\napp.use(csrf({ cookie: true }))\n\n// error handler\napp.use(function (err, req, res, next) {\n  if (err.code !== 'EBADCSRFTOKEN') return next(err)\n\n  // handle CSRF token errors here\n  res.status(403)\n  res.send('form tampered with')\n})\n", "date": "Jan 17 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Adorable Alpaca", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/csurf.html"},
{"title": "example of validating fields on your own in express", "code": "const User = require('./models/user')\n\nexports.createUser = (req, res, next) => {\n  /** Here you need to validate user input. \n   Let's say only Name and email are required field\n */\n  \n  const { userName, email, phone, status } = req.body\n  if (userName && email &&  isValidEmail(email)) { \n    \n    // isValidEmail is some custom email function to validate email which you might need write on your own or use npm module\n    User.create({\n      userName,\n      email,\n      phone,\n      status,   \n    })\n    .then(user => res.json(user))\n    .catch(next)\n  }\n}", "date": "Mar 09 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Defeated Dog", "source_name": "www.freecodecamp.org", "source_url": "https://www.freecodecamp.org/news/how-to-make-input-validation-simple-and-clean-in-your-express-js-app-ea9b5ff5a8a7/"},
{"title": "csurf in express", "code": "$ npm install csurf\n", "date": "Jan 17 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Adorable Alpaca", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/csurf.html"},
{"title": "csurf in express", "code": "var csurf = require('csurf')\n", "date": "Jan 17 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Adorable Alpaca", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/csurf.html"},
{"title": "create server with express js", "code": "// npm init\n// npm i express\n\nconst express = require('express');\nconst server = express();\n\nconst PORT = 3000;\n\n// Body parser\nserver.use(express.json());\n\n// Homme page\nserver.get('/', (req, res) => {\n  return res.send(\"<h1 style='text-align: center;'>Hello,<br />from the Express.js server!</h1>\");\n})\n\n// About page\nserver.get('/about', (req, res) => {\n  return res.send('<h2 style=\"text-align:center\">About us</h2>');\n})\n\n// 404 page\nserver.use((req, res, next) =>{\n  res.status(404);\n\n  // respond with html page\n  if (req.accepts('html')) {\n    res.sendFile(__dirname + '/error404.html');\n    return;\n  }\n  // respond with json\n  else if (req.accepts('json')){\n    res.send({\n      status: 404,\n      error: 'Not found'\n    });\n    return;\n  }\n  // respond with text\n  else {\n    res.type('txt').send('Error 404 - Not found');\n  }\n});\n\n// Listening to the port\nserver.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});", "date": "Apr 16 2021", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Puzzled Penguin", "source_name": null, "source_url": null},
{"title": "require express server.js", "code": "const\u00a0express\u00a0=\u00a0require('express')const\u00a0app\u00a0=\u00a0express()\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World')})\u00a0app.listen(3000)", "date": "Mar 19 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "create express server local", "code": "// create directory\n\n//npm init -y\n//npm i express --save\n\n//create public directory\n//create server.js\n\n// <---- In the server js file --->\n\n'use strict';\n\nconst express = require('express');\nconst app = express();\napp.use(express.static('public'));// to connect with frontend html\napp.use(express.json());//body parse\n\napp.get('/', function(req,res){\n\tres.send('This is the Homepage');\n  \t//res.sendFile('index.html');\n});\n\napp.listen(3000);\n", "date": "Jan 07 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Creepy G\u00e1bor", "source_name": "stackabuse.com", "source_url": "https://stackabuse.com/how-to-start-a-node-server-examples-with-the-most-popular-frameworks/"},
{"title": "connect mongo to express api", "code": "//using mongoose\nnpm i mongoose\n\nconst mongoose = require(\"mongoose\");\n\nmongoose\n  .connect(\n    \"your mongodb URI\",\n    {\n      useNewUrlParser: true,\n      useCreateIndex: true,\n      useFindAndModify: false,\n      useUnifiedTopology: true,\n    }\n  )\n  .then(() => console.log(\"mongodb connected\"))\n  .catch((err) => {\n    console.err(err.message);\n    process.exit(1);\n  });", "date": "Jul 21 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Philan ISithembiso", "source_name": null, "source_url": null},
{"title": "build an api in nodejs using express to send emails using the gmail rest api without client libraries", "code": "/**\n* @param $service Google_Service_Gmail an authorized Gmail API service instance.\n* @param $userId string User's email address or \"me\"\n* @param $message Google_Service_Gmail_Message\n* @return null|Google_Service_Gmail_Message\n*/\nfunction sendMessage($service, $userId, $message) {\n try {\n   $message = $service->users_messages->send($userId, $message);\n   print 'Message with ID: ' . $message->getId() . ' sent.';\n   return $message;\n } catch (Exception $e) {\n   print 'An error occurred: ' . $e->getMessage();\n }\n\n return null;\n}", "date": "Oct 28 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Good Gecko", "source_name": "blog.mailtrap.io", "source_url": "https://blog.mailtrap.io/send-emails-with-gmail-api/#Nodejs"},
{"title": "node express cors headers", "code": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n", "date": "Mar 24 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Adventurous Aardvark", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "build an api in nodejs using express to send emails using the gmail rest api without client libraries", "code": "def send_message(service, user_id, message):\n  try:\n    message = service.users().messages().send(userId=user_id, body=message).execute()\n\n    print('Message Id: %s' % message['id'])\n\n    return message\n  except Exception as e:\n    print('An error occurred: %s' % e)\n    return None\n\n\ndef create_message_with_attachment(sender, to, subject, message_text, file):\n  message = MIMEMultipart()\n  message['to'] = to\n  message['from'] = sender\n  message['subject'] = subject\n\n  msg = MIMEText(message_text)\n  message.attach(msg)\n\n  content_type, encoding = mimetypes.guess_type(file)\n\n  if content_type is None or encoding is not None:\n    content_type = 'application/octet-stream'\n\n  main_type, sub_type = content_type.split('/', 1)\n\n  if main_type == 'text':\n    fp = open(file, 'rb')\n    msg = MIMEText(fp.read().decode(\"utf-8\"), _subtype=sub_type)\n    fp.close()\n  elif main_type == 'image':\n    fp = open(file, 'rb')\n    msg = MIMEImage(fp.read(), _subtype=sub_type)\n    fp.close()\n  elif main_type == 'audio':\n    fp = open(file, 'rb')\n    msg = MIMEAudio(fp.read(), _subtype=sub_type)\n    fp.close()\n  else:\n    fp = open(file, 'rb')\n    msg = MIMEBase(main_type, sub_type)\n    msg.set_payload(fp.read())\n    fp.close()\n  filename = os.path.basename(file)\n  msg.add_header('Content-Disposition', 'attachment', filename=filename)\n  message.attach(msg)\n\n  raw_message = base64.urlsafe_b64encode(message.as_string().encode(\"utf-8\"))\n  return {'raw': raw_message.decode(\"utf-8\")}", "date": "Oct 28 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Good Gecko", "source_name": "blog.mailtrap.io", "source_url": "https://blog.mailtrap.io/send-emails-with-gmail-api/#Nodejs"},
{"title": "express js cors", "code": "var express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})", "date": "Nov 13 2020", "vote": 20, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "allow cors express", "code": "app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});", "date": "Jun 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": null, "source_url": null},
{"title": "express cors error", "code": "//install\nnpm install cors\n//use\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n", "date": "Sep 20 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "kepl3r", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "cors express", "code": "var allowedOrigins = ['http://localhost:3000',\n                      'http://yourapp.com'];\napp.use(cors({  \n  origin: function(origin, callback){\n    // allow requests with no origin     \n    // (like mobile apps or curl requests)    \n    if(!origin) \n      return callback(null, true);    \n    if(allowedOrigins.indexOf(origin) === -1){\n      var msg = 'The CORS policy for this site does not ' +                \n          'allow access from the specified Origin.';      \n      return callback(new Error(msg), false);    \n    }    \n    return callback(null, true);  \n  }\n}));", "date": "Aug 05 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Enthusiastic Elephant", "source_name": "medium.com", "source_url": "https://medium.com/zero-equals-false/using-cors-in-express-cac7e29b005b"},
{"title": "express cors policy", "code": "$ npm install cors\n", "date": "Mar 22 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Condemned Crane", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "EXPRESS generator", "code": "$ npm install express-generator -g\n", "date": "Aug 14 2020", "vote": 2, "tags": ["javascript", "express", "shell"], "posted_by": "DevPedrada", "source_name": "expressjs.com", "source_url": "https://expressjs.com/pt-br/starter/generator.html"},
{"title": "how to download express without view", "code": "npm install express-generator --no-view", "date": "May 24 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Clear Chimpanzee", "source_name": "expressjs.com", "source_url": "https://expressjs.com/fr/starter/generator.html"},
{"title": "generate express app", "code": "$ npx express-generator\n", "date": "Sep 03 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Anxious Addax", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/generator.html"},
{"title": "EXPRESS generator", "code": "$ express -h\n\n  Usage: express [options][dir]\n\n  Options:\n\n    -h, --help          output usage information\n        --version       output the version number\n    -e, --ejs           add ejs engine support\n        --hbs           add handlebars engine support\n        --pug           add pug engine support\n    -H, --hogan         add hogan.js engine support\n        --no-view       generate without view engine\n    -v, --view <engine> add view <engine> support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n    -c, --css <engine>  add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory", "date": "Aug 14 2020", "vote": 2, "tags": ["javascript", "express", "shell"], "posted_by": "DevPedrada", "source_name": "expressjs.com", "source_url": "https://expressjs.com/pt-br/starter/generator.html"},
{"title": "express generator", "code": "$\u00a0npm\u00a0install\u00a0-g\u00a0express-generator", "date": "May 13 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Cheerful Chimpanzee", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express-generator"},
{"title": "express-generator", "code": "$\u00a0npm\u00a0install", "date": "Dec 20 2020", "vote": -1, "tags": ["javascript", "express", "whatever"], "posted_by": "Creepy Crayfish", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express-generator"},
{"title": "body parser express", "code": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n", "date": "Jul 21 2020", "vote": 10, "tags": ["javascript", "express"], "posted_by": "Philan ISithembiso", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/body-parser.html"},
{"title": "how to make an express server", "code": "// this is your code\n// ZDev1#4511 on discord if you want more help!\n// first you should install express in the terminal\n// `npm i express`.\nconst express = require('express');\nconst app = express();\n\n// route\napp.get('/', (req,res)=>{\n  // Sending This is the home page! in the page\n  res.send('This is the home page!');\n});\n\n// Listening to the port\nlet PORT = 3000;\napp.listen(PORT)\n\n// FINISH!", "date": "Jul 03 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "ZDev1", "source_name": null, "source_url": null},
{"title": "body-parser npm", "code": "$\u00a0npm\u00a0install\u00a0body-parser", "date": "May 30 2020", "vote": 0, "tags": ["javascript", "express", "whatever"], "posted_by": "Thankful Tortoise", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/body-parser"},
{"title": "body parser use", "code": "var express = require(\"express\");\nvar app = express();\nvar bodyParser = require(\"body-parser\");\napp.use(bodyParser.urlencoded({extended: true}));", "date": "Jul 25 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "arkyyadav001", "source_name": null, "source_url": null},
{"title": "body-parser node", "code": "// Express/Connect top-level generic\n// This example demonstrates adding a generic JSON and URL-encoded parser as a top-level middleware, which will parse the bodies of all incoming requests. \n// This is the simplest setup.\n\nvar\u00a0express\u00a0=\u00a0require('express')\nvar\u00a0bodyParser\u00a0=\u00a0require('body-parser')\u00a0\nvar\u00a0app\u00a0=\u00a0express()\u00a0\n\n//\u00a0parse\u00a0application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({\u00a0extended:\u00a0false\u00a0}))\u00a0\n\n//\u00a0parse\u00a0application/json\napp.use(bodyParser.json())\u00a0\n\napp.use(function\u00a0(req,\u00a0res)\u00a0{\n  res.setHeader('Content-Type',\u00a0'text/plain')\u00a0\u00a0\n  res.write('you\u00a0posted:\\n')\u00a0\u00a0\nres.end(JSON.stringify(req.body,\u00a0null,\u00a02))})", "date": "Apr 01 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Frightened Falcon", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/body-parser"},
{"title": "bodyparser express", "code": "var express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// parse various different custom JSON types as JSON\napp.use(bodyParser.json({ type: 'application/*+json' }))\n\n// parse some custom thing into a Buffer\napp.use(bodyParser.raw({ type: 'application/vnd.custom-type' }))\n\n// parse an HTML body into a string\napp.use(bodyParser.text({ type: 'text/html' }))\n", "date": "Jan 09 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Gifted Goosander", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/body-parser.html"},
{"title": "bodyparser express", "code": "var express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// create application/json parser\nvar jsonParser = bodyParser.json()\n\n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n\n// POST /login gets urlencoded bodies\napp.post('/login', urlencodedParser, function (req, res) {\n  res.send('welcome, ' + req.body.username)\n})\n\n// POST /api/users gets JSON bodies\napp.post('/api/users', jsonParser, function (req, res) {\n  // create user in req.body\n})\n", "date": "Jan 09 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Gifted Goosander", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/body-parser.html"},
{"title": "create express server local", "code": "// create directory\n\n//npm init -y\n//npm i express --save\n\n//create public directory\n//create server.js\n\n// <---- In the server js file --->\n\n'use strict';\n\nconst express = require('express');\nconst app = express();\napp.use(express.static('public'));// to connect with frontend html\napp.use(express.json());//body parse\n\napp.get('/', function(req,res){\n\tres.send('This is the Homepage');\n  \t//res.sendFile('index.html');\n});\n\napp.listen(3000);\n", "date": "Jan 07 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Creepy G\u00e1bor", "source_name": "stackabuse.com", "source_url": "https://stackabuse.com/how-to-start-a-node-server-examples-with-the-most-popular-frameworks/"},
{"title": "body parser express", "code": "//make sure it is in this order\nnpm i body-parser\n\nconst express = require('express')\nconst bodyParser = require('body-parser')\n\nconst app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n", "date": "Jul 21 2020", "vote": 10, "tags": ["javascript", "express"], "posted_by": "Philan ISithembiso", "source_name": "expressjs.com", "source_url": "http://expressjs.com/en/resources/middleware/body-parser.html"},
{"title": "body-parser npm", "code": "$\u00a0npm\u00a0install\u00a0body-parser", "date": "May 30 2020", "vote": 0, "tags": ["javascript", "express", "whatever"], "posted_by": "Thankful Tortoise", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/body-parser"},
{"title": "body parser use", "code": "var express = require(\"express\");\nvar app = express();\nvar bodyParser = require(\"body-parser\");\napp.use(bodyParser.urlencoded({extended: true}));", "date": "Jul 25 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "arkyyadav001", "source_name": null, "source_url": null},
{"title": "body-parser node", "code": "// Express/Connect top-level generic\n// This example demonstrates adding a generic JSON and URL-encoded parser as a top-level middleware, which will parse the bodies of all incoming requests. \n// This is the simplest setup.\n\nvar\u00a0express\u00a0=\u00a0require('express')\nvar\u00a0bodyParser\u00a0=\u00a0require('body-parser')\u00a0\nvar\u00a0app\u00a0=\u00a0express()\u00a0\n\n//\u00a0parse\u00a0application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({\u00a0extended:\u00a0false\u00a0}))\u00a0\n\n//\u00a0parse\u00a0application/json\napp.use(bodyParser.json())\u00a0\n\napp.use(function\u00a0(req,\u00a0res)\u00a0{\n  res.setHeader('Content-Type',\u00a0'text/plain')\u00a0\u00a0\n  res.write('you\u00a0posted:\\n')\u00a0\u00a0\nres.end(JSON.stringify(req.body,\u00a0null,\u00a02))})", "date": "Apr 01 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Frightened Falcon", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/body-parser"},
{"title": "bodyparser purpose", "code": "//body-parser helps parse json files\n//you can use body-parser anytime you need to use a form to post\n//data to a request\nvar bodyParser = require(\"body-parser\"); \napp.use(bodyParser.urlencoded({extended: true})); ", "date": "Jul 12 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Mocat", "source_name": null, "source_url": null},
{"title": "body parser express", "code": "app.use(express.json()); //Used to parse JSON bodies", "date": "Jan 08 2021", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Obedient Otter", "source_name": "medium.com", "source_url": "https://medium.com/@mmajdanski/express-body-parser-and-why-may-not-need-it-335803cd048c"},
{"title": "apex express 18 forgot password", "code": "connect SYS as SYSADMIN\n\n", "date": "Sep 14 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Energetic Eland", "source_name": null, "source_url": null},
{"title": "allow cross origin node", "code": "app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});", "date": "Apr 23 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Magnificent Manatee", "source_name": null, "source_url": null},
{"title": "access-control-allow-origin nodejs express", "code": "// Add headers\napp.use(function (req, res, next) {\n\n    // Website you wish to allow to connect\n    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888');\n\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader('Access-Control-Allow-Credentials', true);\n\n    // Pass to next layer of middleware\n    next();\n});", "date": "Jul 08 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Precious Plover", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/18310394/no-access-control-allow-origin-node-apache-port-issue"},
{"title": "node express cors headers", "code": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n", "date": "Mar 24 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Adventurous Aardvark", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "express js cors", "code": "var express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})", "date": "Nov 13 2020", "vote": 20, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "allow cors express", "code": "app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});", "date": "Jun 04 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": null, "source_url": null},
{"title": "cors express", "code": "var allowedOrigins = ['http://localhost:3000',\n                      'http://yourapp.com'];\napp.use(cors({  \n  origin: function(origin, callback){\n    // allow requests with no origin     \n    // (like mobile apps or curl requests)    \n    if(!origin) \n      return callback(null, true);    \n    if(allowedOrigins.indexOf(origin) === -1){\n      var msg = 'The CORS policy for this site does not ' +                \n          'allow access from the specified Origin.';      \n      return callback(new Error(msg), false);    \n    }    \n    return callback(null, true);  \n  }\n}));", "date": "Aug 05 2020", "vote": 3, "tags": ["javascript", "express"], "posted_by": "Enthusiastic Elephant", "source_name": "medium.com", "source_url": "https://medium.com/zero-equals-false/using-cors-in-express-cac7e29b005b"},
{"title": "ali express no ads apk latest", "code": "Found none aviable", "date": "Jan 04 2021", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Ill Ibis", "source_name": null, "source_url": null},
{"title": "app.listen express", "code": "\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n\n", "date": "Dec 14 2020", "vote": 2, "tags": ["javascript", "express"], "posted_by": "Poor Porcupine", "source_name": "expressjs.com", "source_url": "https://expressjs.com/fr/starter/hello-world.html"},
{"title": "express hello world", "code": "//to run : node filename.js\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n\n//visit localhost:3000\n// assuming you have done 1) npm init 2) npm install express", "date": "Jul 17 2020", "vote": 35, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null},
{"title": "sample express app", "code": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => res.send('Hello World!'))\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n", "date": "May 12 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Poised Penguin", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/starter/hello-world.html"},
{"title": "require express server.js", "code": "const\u00a0express\u00a0=\u00a0require('express')const\u00a0app\u00a0=\u00a0express()\u00a0app.get('/',\u00a0function\u00a0(req,\u00a0res)\u00a0{\u00a0\u00a0res.send('Hello\u00a0World')})\u00a0app.listen(3000)", "date": "Mar 19 2020", "vote": 5, "tags": ["javascript", "express"], "posted_by": "Itchy Iguana", "source_name": "www.npmjs.com", "source_url": "https://www.npmjs.com/package/express"},
{"title": "http header express", "code": "app.get('/', (req, res) => {\n  req.header('User-Agent')\n})\n// Use the Request.header() method to access\n//one individual request header\u2019s value", "date": "Apr 17 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Creepy Copperhead", "source_name": "flaviocopes.com", "source_url": "https://flaviocopes.com/express-headers/"},
{"title": "accept Post with no midleWare express", "code": "const express=require('express');\nconst app=express();\n//accept Post with no midleWare express\napp.post(\"/register/\",function(req,res){\n    var bodyStr = '';\n    req.on(\"data\",function(chunk){\n        bodyStr += chunk.toString();\n    });\n    req.on(\"end\",function(){\n        res.send(bodyStr);\n    });\n\n});", "date": "Sep 16 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Nimorum", "source_name": null, "source_url": null},
{"title": "== operation is not working on ids in express", "code": "Mongoose uses the mongodb-native driver, which uses the custom ObjectID type.\nYou can compare ObjectIDs with the .equals() method.\nWith your example, results.userId.equals(AnotherMongoDocument._id).\nThe ObjectID type also has a toString() method, if you wish to store a stringified version of the ObjectID in JSON \nformat, or a cookie.\n\nIf you use ObjectID = require(\"mongodb\").ObjectID (requires the mongodb-native \nlibrary) you can check if results.userId is a valid identifier with \n  results.userId instanceof ObjectID.\n", "date": "Nov 20 2020", "vote": 0, "tags": ["javascript", "express"], "posted_by": "Joyous Jackal", "source_name": null, "source_url": null},
{"title": "allow cross origin node", "code": "app.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});", "date": "Apr 23 2020", "vote": 4, "tags": ["javascript", "express"], "posted_by": "Magnificent Manatee", "source_name": null, "source_url": null},
{"title": "access-control-allow-origin nodejs express", "code": "// Add headers\napp.use(function (req, res, next) {\n\n    // Website you wish to allow to connect\n    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888');\n\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader('Access-Control-Allow-Credentials', true);\n\n    // Pass to next layer of middleware\n    next();\n});", "date": "Jul 08 2020", "vote": 1, "tags": ["javascript", "express"], "posted_by": "Precious Plover", "source_name": "stackoverflow.com", "source_url": "https://stackoverflow.com/questions/18310394/no-access-control-allow-origin-node-apache-port-issue"},
{"title": "node express cors headers", "code": "var express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n", "date": "Mar 24 2020", "vote": 13, "tags": ["javascript", "express"], "posted_by": "Adventurous Aardvark", "source_name": "expressjs.com", "source_url": "https://expressjs.com/en/resources/middleware/cors.html"},
{"title": "express js cors", "code": "var express = require('express')\nvar cors = require('cors')  //use this\nvar app = express()\n\napp.use(cors()) //and this\n\napp.get('/user/:id', function (req, res, next) {\n  res.json({user: 'CORS enabled'})\n})\n\napp.listen(5000, function () {\n  console.log('CORS-enabled web server listening on port 5000')\n})", "date": "Nov 13 2020", "vote": 20, "tags": ["javascript", "express"], "posted_by": "Batman", "source_name": null, "source_url": null}
]